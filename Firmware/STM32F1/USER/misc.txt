; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --execute_only --list --split_sections --debug -c --asm --interleave -o..\obj\misc.o --asm_dir=.\ --list_dir=.\ --depend=..\obj\misc.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931 -I..\HARDWARE\LED -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\STM32F10x_FWLib\inc -I..\CORE -I..\HARDWARE\KEY -I..\HARDWARE\TIMER -I..\SYSTEM\bsptime -I..\SYSTEM\IM1281B -I.\RTE\_PWM -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.4.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=527 -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\misc.crf ..\STM32F10x_FWLib\src\misc.c]
                          THUMB

                          AREA ||i.NVIC_Init||, CODE, EXECONLY, ALIGN=1

                  NVIC_Init PROC
;;;111      */
;;;112    void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;113    {
;;;114      uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
000002  230f              MOVS     r3,#0xf
;;;115      
;;;116      /* Check the parameters */
;;;117      assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
;;;118      assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
;;;119      assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
;;;120        
;;;121      if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
000004  78c2              LDRB     r2,[r0,#3]
;;;122      {
;;;123        /* Compute the Corresponding IRQ Priority --------------------------------*/    
;;;124        tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
;;;125        tmppre = (0x4 - tmppriority);
;;;126        tmpsub = tmpsub >> tmppriority;
;;;127    
;;;128        tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
;;;129        tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
;;;130        tmppriority = tmppriority << 0x04;
;;;131            
;;;132        NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
000006  7801              LDRB     r1,[r0,#0]
;;;133        
;;;134        /* Enable the Selected IRQ Channels --------------------------------------*/
;;;135        NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
000008  2501              MOVS     r5,#1
00000a  b30a              CBZ      r2,|L1.80|
00000c  f64e520c          MOV      r2,#0xed0c            ;124
000010  f2ce0200          MOVT     r2,#0xe000            ;124
000014  6812              LDR      r2,[r2,#0]            ;124
000016  f10121e0          ADD      r1,r1,#0xe000e000     ;130
00001a  f40262e0          AND      r2,r2,#0x700          ;124
00001e  f5c262e0          RSB      r2,r2,#0x700          ;124
000022  0a12              LSRS     r2,r2,#8              ;124
000024  f1c20404          RSB      r4,r2,#4              ;125
000028  40d3              LSRS     r3,r3,r2              ;126
00002a  7842              LDRB     r2,[r0,#1]            ;128
00002c  40a2              LSLS     r2,r2,r4              ;128
00002e  7884              LDRB     r4,[r0,#2]            ;129
000030  401c              ANDS     r4,r4,r3              ;129
000032  4314              ORRS     r4,r4,r2              ;129
000034  0122              LSLS     r2,r4,#4              ;130
000036  f8812400          STRB     r2,[r1,#0x400]        ;132
00003a  7800              LDRB     r0,[r0,#0]
00003c  f000011f          AND      r1,r0,#0x1f
000040  408d              LSLS     r5,r5,r1
000042  0940              LSRS     r0,r0,#5
000044  0080              LSLS     r0,r0,#2
000046  f10020e0          ADD      r0,r0,#0xe000e000
00004a  f8c05100          STR      r5,[r0,#0x100]
;;;136          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;137      }
;;;138      else
;;;139      {
;;;140        /* Disable the Selected IRQ Channels -------------------------------------*/
;;;141        NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
;;;142          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;143      }
;;;144    }
00004e  bd30              POP      {r4,r5,pc}
                  |L1.80|
000050  f001001f          AND      r0,r1,#0x1f           ;141
000054  4085              LSLS     r5,r5,r0              ;141
000056  0948              LSRS     r0,r1,#5              ;141
000058  0080              LSLS     r0,r0,#2              ;141
00005a  f10020e0          ADD      r0,r0,#0xe000e000     ;141
00005e  f8c05180          STR      r5,[r0,#0x180]        ;141
000062  bd30              POP      {r4,r5,pc}
;;;145    
                          ENDP


                          AREA ||i.NVIC_PriorityGroupConfig||, CODE, EXECONLY, ALIGN=1

                  NVIC_PriorityGroupConfig PROC
;;;95       */
;;;96     void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
000000  f64e510c          MOV      r1,#0xed0c
;;;97     {
;;;98       /* Check the parameters */
;;;99       assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
;;;100      
;;;101      /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
;;;102      SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
000004  f04070fd          ORR      r0,r0,#0x1fa0000
000008  f2ce0100          MOVT     r1,#0xe000
00000c  f0406080          ORR      r0,r0,#0x4000000
000010  6008              STR      r0,[r1,#0]
;;;103    }
000012  4770              BX       lr
;;;104    
                          ENDP


                          AREA ||i.NVIC_SetVectorTable||, CODE, EXECONLY, ALIGN=1

                  NVIC_SetVectorTable PROC
;;;155      */
;;;156    void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
000000  f021017f          BIC      r1,r1,#0x7f
;;;157    { 
;;;158      /* Check the parameters */
;;;159      assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
;;;160      assert_param(IS_NVIC_OFFSET(Offset));  
;;;161       
;;;162      SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
000004  f0214160          BIC      r1,r1,#0xe0000000
000008  4301              ORRS     r1,r1,r0
00000a  f64e5008          MOV      r0,#0xed08
00000e  f2ce0000          MOVT     r0,#0xe000
000012  6001              STR      r1,[r0,#0]
;;;163    }
000014  4770              BX       lr
;;;164    
                          ENDP


                          AREA ||i.NVIC_SystemLPConfig||, CODE, EXECONLY, ALIGN=1

                  NVIC_SystemLPConfig PROC
;;;174      */
;;;175    void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
000000  f64e5210          MOV      r2,#0xed10
;;;176    {
;;;177      /* Check the parameters */
;;;178      assert_param(IS_NVIC_LP(LowPowerMode));
;;;179      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;180      
;;;181      if (NewState != DISABLE)
;;;182      {
;;;183        SCB->SCR |= LowPowerMode;
000004  f2ce0200          MOVT     r2,#0xe000
000008  2900              CMP      r1,#0                 ;181
;;;184      }
;;;185      else
;;;186      {
;;;187        SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
00000a  6811              LDR      r1,[r2,#0]
00000c  d001              BEQ      |L4.18|
00000e  4301              ORRS     r1,r1,r0              ;183
000010  e000              B        |L4.20|
                  |L4.18|
000012  4381              BICS     r1,r1,r0
                  |L4.20|
000014  6011              STR      r1,[r2,#0]            ;183
;;;188      }
;;;189    }
000016  4770              BX       lr
;;;190    
                          ENDP


                          AREA ||i.SysTick_CLKSourceConfig||, CODE, EXECONLY, ALIGN=1

                  SysTick_CLKSourceConfig PROC
;;;198      */
;;;199    void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
000000  f04f21e0          MOV      r1,#0xe000e000
;;;200    {
;;;201      /* Check the parameters */
;;;202      assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
;;;203      if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
000004  2804              CMP      r0,#4
;;;204      {
;;;205        SysTick->CTRL |= SysTick_CLKSource_HCLK;
;;;206      }
;;;207      else
;;;208      {
;;;209        SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
000006  6908              LDR      r0,[r1,#0x10]
000008  d003              BEQ      |L5.18|
00000a  f0200004          BIC      r0,r0,#4
                  |L5.14|
00000e  6108              STR      r0,[r1,#0x10]         ;205
;;;210      }
;;;211    }
000010  4770              BX       lr
                  |L5.18|
000012  f0400004          ORR      r0,r0,#4              ;205
000016  e7fa              B        |L5.14|
;;;212    
                          ENDP

