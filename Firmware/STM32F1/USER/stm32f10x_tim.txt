; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --execute_only --list --split_sections --debug -c --asm --interleave -o..\obj\stm32f10x_tim.o --asm_dir=.\ --list_dir=.\ --depend=..\obj\stm32f10x_tim.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931 -I..\HARDWARE\LED -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\STM32F10x_FWLib\inc -I..\CORE -I..\HARDWARE\KEY -I..\HARDWARE\TIMER -I..\SYSTEM\bsptime -I..\SYSTEM\IM1281B -I.\RTE\_PWM -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.4.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=527 -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\stm32f10x_tim.crf ..\STM32F10x_FWLib\src\stm32f10x_tim.c]
                          THUMB

                          AREA ||i.TI1_Config||, CODE, EXECONLY, ALIGN=1

                  TI1_Config PROC
;;;2700     */
;;;2701   static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
000000  b570              PUSH     {r4-r6,lr}
;;;2702                          uint16_t TIM_ICFilter)
;;;2703   {
;;;2704     uint16_t tmpccmr1 = 0, tmpccer = 0;
;;;2705     /* Disable the Channel 1: Reset the CC1E Bit */
;;;2706     TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
000002  8c04              LDRH     r4,[r0,#0x20]
000004  f0240401          BIC      r4,r4,#1
000008  8404              STRH     r4,[r0,#0x20]
;;;2707     tmpccmr1 = TIMx->CCMR1;
00000a  8b05              LDRH     r5,[r0,#0x18]
;;;2708     tmpccer = TIMx->CCER;
00000c  8c04              LDRH     r4,[r0,#0x20]
;;;2709     /* Select the Input and set the filter */
;;;2710     tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
;;;2711     tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
00000e  f64f76ff          MOV      r6,#0xffff
000012  ea061303          AND      r3,r6,r3,LSL #4
000016  4313              ORRS     r3,r3,r2
000018  f02505f3          BIC      r5,r5,#0xf3           ;2710
00001c  432b              ORRS     r3,r3,r5
;;;2712     
;;;2713     if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
00001e  f1a04280          SUB      r2,r0,#0x40000000
000022  f5b23296          SUBS     r2,r2,#0x12c00
000026  d01e              BEQ      |L1.102|
000028  f1a04280          SUB      r2,r0,#0x40000000
00002c  f5b2329a          SUBS     r2,r2,#0x13400
000030  d019              BEQ      |L1.102|
000032  f1b04f80          CMP      r0,#0x40000000
000036  d016              BEQ      |L1.102|
000038  f1a04280          SUB      r2,r0,#0x40000000
00003c  f5b26280          SUBS     r2,r2,#0x400
000040  d011              BEQ      |L1.102|
;;;2714        (TIMx == TIM4) ||(TIMx == TIM5))
000042  f1a04280          SUB      r2,r0,#0x40000000
000046  f5b26200          SUBS     r2,r2,#0x800
00004a  d00c              BEQ      |L1.102|
00004c  f1a04280          SUB      r2,r0,#0x40000000
000050  f5b26240          SUBS     r2,r2,#0xc00
000054  d007              BEQ      |L1.102|
;;;2715     {
;;;2716       /* Select the Polarity and set the CC1E Bit */
;;;2717       tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
;;;2718       tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
;;;2719     }
;;;2720     else
;;;2721     {
;;;2722       /* Select the Polarity and set the CC1E Bit */
;;;2723       tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
000056  f024020a          BIC      r2,r4,#0xa
                  |L1.90|
;;;2724       tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
00005a  430a              ORRS     r2,r2,r1
00005c  f0420101          ORR      r1,r2,#1
;;;2725     }
;;;2726   
;;;2727     /* Write to TIMx CCMR1 and CCER registers */
;;;2728     TIMx->CCMR1 = tmpccmr1;
000060  8303              STRH     r3,[r0,#0x18]
;;;2729     TIMx->CCER = tmpccer;
000062  8401              STRH     r1,[r0,#0x20]
;;;2730   }
000064  bd70              POP      {r4-r6,pc}
                  |L1.102|
000066  f0240202          BIC      r2,r4,#2              ;2717
00006a  e7f6              B        |L1.90|
;;;2731   
                          ENDP


                          AREA ||i.TI2_Config||, CODE, EXECONLY, ALIGN=1

                  TI2_Config PROC
;;;2747     */
;;;2748   static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
000000  b5f0              PUSH     {r4-r7,lr}
;;;2749                          uint16_t TIM_ICFilter)
;;;2750   {
;;;2751     uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
;;;2752     /* Disable the Channel 2: Reset the CC2E Bit */
;;;2753     TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
000002  8c04              LDRH     r4,[r0,#0x20]
000004  f0240410          BIC      r4,r4,#0x10
000008  8404              STRH     r4,[r0,#0x20]
;;;2754     tmpccmr1 = TIMx->CCMR1;
00000a  8b07              LDRH     r7,[r0,#0x18]
;;;2755     tmpccer = TIMx->CCER;
00000c  8c04              LDRH     r4,[r0,#0x20]
;;;2756     tmp = (uint16_t)(TIM_ICPolarity << 4);
00000e  f64f75ff          MOV      r5,#0xffff
;;;2757     /* Select the Input and set the filter */
;;;2758     tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
000012  f4274773          BIC      r7,r7,#0xf300
;;;2759     tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
000016  ea053303          AND      r3,r5,r3,LSL #12
00001a  433b              ORRS     r3,r3,r7
;;;2760     tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
00001c  ea052202          AND      r2,r5,r2,LSL #8
000020  431a              ORRS     r2,r2,r3
;;;2761     
;;;2762     if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
000022  f1a04380          SUB      r3,r0,#0x40000000
000026  ea051601          AND      r6,r5,r1,LSL #4       ;2756
00002a  f5b33396          SUBS     r3,r3,#0x12c00
00002e  d01e              BEQ      |L2.110|
000030  f1a04380          SUB      r3,r0,#0x40000000
000034  f5b3339a          SUBS     r3,r3,#0x13400
000038  d019              BEQ      |L2.110|
00003a  f1b04f80          CMP      r0,#0x40000000
00003e  d016              BEQ      |L2.110|
000040  f1a04380          SUB      r3,r0,#0x40000000
000044  f5b36380          SUBS     r3,r3,#0x400
000048  d011              BEQ      |L2.110|
;;;2763        (TIMx == TIM4) ||(TIMx == TIM5))
00004a  f1a04380          SUB      r3,r0,#0x40000000
00004e  f5b36300          SUBS     r3,r3,#0x800
000052  d00c              BEQ      |L2.110|
000054  f1a04380          SUB      r3,r0,#0x40000000
000058  f5b36340          SUBS     r3,r3,#0xc00
00005c  d007              BEQ      |L2.110|
;;;2764     {
;;;2765       /* Select the Polarity and set the CC2E Bit */
;;;2766       tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
;;;2767       tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
;;;2768     }
;;;2769     else
;;;2770     {
;;;2771       /* Select the Polarity and set the CC2E Bit */
;;;2772       tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
00005e  f02403a0          BIC      r3,r4,#0xa0
;;;2773       tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
000062  430b              ORRS     r3,r3,r1
000064  f0430110          ORR      r1,r3,#0x10
                  |L2.104|
;;;2774     }
;;;2775     
;;;2776     /* Write to TIMx CCMR1 and CCER registers */
;;;2777     TIMx->CCMR1 = tmpccmr1 ;
000068  8302              STRH     r2,[r0,#0x18]
;;;2778     TIMx->CCER = tmpccer;
00006a  8401              STRH     r1,[r0,#0x20]
;;;2779   }
00006c  bdf0              POP      {r4-r7,pc}
                  |L2.110|
00006e  f0240120          BIC      r1,r4,#0x20           ;2766
000072  4331              ORRS     r1,r1,r6              ;2767
000074  f0410110          ORR      r1,r1,#0x10           ;2767
000078  e7f6              B        |L2.104|
;;;2780   
                          ENDP


                          AREA ||i.TIM_ARRPreloadConfig||, CODE, EXECONLY, ALIGN=1

                  TIM_ARRPreloadConfig PROC
;;;1408     */
;;;1409   void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;1410   {
;;;1411     /* Check the parameters */
;;;1412     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;1413     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1414     if (NewState != DISABLE)
;;;1415     {
;;;1416       /* Set the ARR Preload Bit */
;;;1417       TIMx->CR1 |= TIM_CR1_ARPE;
;;;1418     }
;;;1419     else
;;;1420     {
;;;1421       /* Reset the ARR Preload Bit */
;;;1422       TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
000002  8801              LDRH     r1,[r0,#0]
000004  d002              BEQ      |L3.12|
000006  f0410180          ORR      r1,r1,#0x80           ;1417
00000a  e001              B        |L3.16|
                  |L3.12|
00000c  f0210180          BIC      r1,r1,#0x80
                  |L3.16|
000010  8001              STRH     r1,[r0,#0]            ;1417
;;;1423     }
;;;1424   }
000012  4770              BX       lr
;;;1425   
                          ENDP


                          AREA ||i.TIM_BDTRConfig||, CODE, EXECONLY, ALIGN=1

                  TIM_BDTRConfig PROC
;;;711      */
;;;712    void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
000000  b510              PUSH     {r4,lr}
;;;713    {
;;;714      /* Check the parameters */
;;;715      assert_param(IS_TIM_LIST2_PERIPH(TIMx));
;;;716      assert_param(IS_TIM_OSSR_STATE(TIM_BDTRInitStruct->TIM_OSSRState));
;;;717      assert_param(IS_TIM_OSSI_STATE(TIM_BDTRInitStruct->TIM_OSSIState));
;;;718      assert_param(IS_TIM_LOCK_LEVEL(TIM_BDTRInitStruct->TIM_LOCKLevel));
;;;719      assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
;;;720      assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
;;;721      assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
;;;722      /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
;;;723         the OSSI State, the dead time value and the Automatic Output Enable Bit */
;;;724      TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
000002  880a              LDRH     r2,[r1,#0]
000004  884b              LDRH     r3,[r1,#2]
000006  88cc              LDRH     r4,[r1,#6]
000008  431a              ORRS     r2,r2,r3
00000a  888b              LDRH     r3,[r1,#4]
00000c  4323              ORRS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  890b              LDRH     r3,[r1,#8]
000012  431a              ORRS     r2,r2,r3
000014  894b              LDRH     r3,[r1,#0xa]
000016  8989              LDRH     r1,[r1,#0xc]
000018  431a              ORRS     r2,r2,r3
00001a  430a              ORRS     r2,r2,r1
00001c  f8a02044          STRH     r2,[r0,#0x44]
;;;725                 TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
;;;726                 TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
;;;727                 TIM_BDTRInitStruct->TIM_AutomaticOutput;
;;;728    }
000020  bd10              POP      {r4,pc}
;;;729    
                          ENDP


                          AREA ||i.TIM_BDTRStructInit||, CODE, EXECONLY, ALIGN=1

                  TIM_BDTRStructInit PROC
;;;786      */
;;;787    void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
000000  2100              MOVS     r1,#0
;;;788    {
;;;789      /* Set the default configuration */
;;;790      TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
000002  8001              STRH     r1,[r0,#0]
;;;791      TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
000004  8041              STRH     r1,[r0,#2]
;;;792      TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
000006  8081              STRH     r1,[r0,#4]
;;;793      TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
000008  80c1              STRH     r1,[r0,#6]
;;;794      TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
00000a  8101              STRH     r1,[r0,#8]
;;;795      TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
00000c  8141              STRH     r1,[r0,#0xa]
;;;796      TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
00000e  8181              STRH     r1,[r0,#0xc]
;;;797    }
000010  4770              BX       lr
;;;798    
                          ENDP


                          AREA ||i.TIM_CCPreloadControl||, CODE, EXECONLY, ALIGN=1

                  TIM_CCPreloadControl PROC
;;;1482     */
;;;1483   void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;1484   { 
;;;1485     /* Check the parameters */
;;;1486     assert_param(IS_TIM_LIST5_PERIPH(TIMx));
;;;1487     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1488     if (NewState != DISABLE)
;;;1489     {
;;;1490       /* Set the CCPC Bit */
;;;1491       TIMx->CR2 |= TIM_CR2_CCPC;
;;;1492     }
;;;1493     else
;;;1494     {
;;;1495       /* Reset the CCPC Bit */
;;;1496       TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
000002  8881              LDRH     r1,[r0,#4]
000004  d002              BEQ      |L6.12|
000006  f0410101          ORR      r1,r1,#1              ;1491
00000a  e001              B        |L6.16|
                  |L6.12|
00000c  f0210101          BIC      r1,r1,#1
                  |L6.16|
000010  8081              STRH     r1,[r0,#4]            ;1491
;;;1497     }
;;;1498   }
000012  4770              BX       lr
;;;1499   
                          ENDP


                          AREA ||i.TIM_CCxCmd||, CODE, EXECONLY, ALIGN=1

                  TIM_CCxCmd PROC
;;;1973     */
;;;1974   void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
000000  b510              PUSH     {r4,lr}
;;;1975   {
;;;1976     uint16_t tmp = 0;
;;;1977   
;;;1978     /* Check the parameters */
;;;1979     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;1980     assert_param(IS_TIM_CHANNEL(TIM_Channel));
;;;1981     assert_param(IS_TIM_CCX(TIM_CCx));
;;;1982   
;;;1983     tmp = CCER_CCE_Set << TIM_Channel;
000002  2301              MOVS     r3,#1
;;;1984   
;;;1985     /* Reset the CCxE Bit */
;;;1986     TIMx->CCER &= (uint16_t)~ tmp;
000004  8c04              LDRH     r4,[r0,#0x20]
000006  408b              LSLS     r3,r3,r1              ;1983
000008  439c              BICS     r4,r4,r3
00000a  8404              STRH     r4,[r0,#0x20]
;;;1987   
;;;1988     /* Set or reset the CCxE Bit */ 
;;;1989     TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
00000c  8c03              LDRH     r3,[r0,#0x20]
00000e  408a              LSLS     r2,r2,r1
000010  4313              ORRS     r3,r3,r2
000012  8403              STRH     r3,[r0,#0x20]
;;;1990   }
000014  bd10              POP      {r4,pc}
;;;1991   
                          ENDP


                          AREA ||i.TIM_CCxNCmd||, CODE, EXECONLY, ALIGN=1

                  TIM_CCxNCmd PROC
;;;2003     */
;;;2004   void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
000000  b510              PUSH     {r4,lr}
;;;2005   {
;;;2006     uint16_t tmp = 0;
;;;2007   
;;;2008     /* Check the parameters */
;;;2009     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
;;;2010     assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
;;;2011     assert_param(IS_TIM_CCXN(TIM_CCxN));
;;;2012   
;;;2013     tmp = CCER_CCNE_Set << TIM_Channel;
000002  2304              MOVS     r3,#4
;;;2014   
;;;2015     /* Reset the CCxNE Bit */
;;;2016     TIMx->CCER &= (uint16_t) ~tmp;
000004  8c04              LDRH     r4,[r0,#0x20]
000006  408b              LSLS     r3,r3,r1              ;2013
000008  439c              BICS     r4,r4,r3
00000a  8404              STRH     r4,[r0,#0x20]
;;;2017   
;;;2018     /* Set or reset the CCxNE Bit */ 
;;;2019     TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
00000c  8c03              LDRH     r3,[r0,#0x20]
00000e  408a              LSLS     r2,r2,r1
000010  4313              ORRS     r3,r3,r2
000012  8403              STRH     r3,[r0,#0x20]
;;;2020   }
000014  bd10              POP      {r4,pc}
;;;2021   
                          ENDP


                          AREA ||i.TIM_ClearFlag||, CODE, EXECONLY, ALIGN=1

                  TIM_ClearFlag PROC
;;;2599     */
;;;2600   void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
000000  43c9              MVNS     r1,r1
;;;2601   {  
;;;2602     /* Check the parameters */
;;;2603     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2604     assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
;;;2605      
;;;2606     /* Clear the flags */
;;;2607     TIMx->SR = (uint16_t)~TIM_FLAG;
000002  8201              STRH     r1,[r0,#0x10]
;;;2608   }
000004  4770              BX       lr
;;;2609   
                          ENDP


                          AREA ||i.TIM_ClearITPendingBit||, CODE, EXECONLY, ALIGN=1

                  TIM_ClearITPendingBit PROC
;;;2675     */
;;;2676   void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
000000  43c9              MVNS     r1,r1
;;;2677   {
;;;2678     /* Check the parameters */
;;;2679     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2680     assert_param(IS_TIM_IT(TIM_IT));
;;;2681     /* Clear the IT pending Bit */
;;;2682     TIMx->SR = (uint16_t)~TIM_IT;
000002  8201              STRH     r1,[r0,#0x10]
;;;2683   }
000004  4770              BX       lr
;;;2684   
                          ENDP


                          AREA ||i.TIM_ClearOC1Ref||, CODE, EXECONLY, ALIGN=1

                  TIM_ClearOC1Ref PROC
;;;1706     */
;;;1707   void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;1708   {
;;;1709     uint16_t tmpccmr1 = 0;
;;;1710     /* Check the parameters */
;;;1711     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1712     assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
;;;1713   
;;;1714     tmpccmr1 = TIMx->CCMR1;
;;;1715   
;;;1716     /* Reset the OC1CE Bit */
;;;1717     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
000002  f0220280          BIC      r2,r2,#0x80
;;;1718     /* Enable or Disable the Output Compare Clear Bit */
;;;1719     tmpccmr1 |= TIM_OCClear;
000006  430a              ORRS     r2,r2,r1
;;;1720     /* Write to TIMx CCMR1 register */
;;;1721     TIMx->CCMR1 = tmpccmr1;
000008  8302              STRH     r2,[r0,#0x18]
;;;1722   }
00000a  4770              BX       lr
;;;1723   
                          ENDP


                          AREA ||i.TIM_ClearOC2Ref||, CODE, EXECONLY, ALIGN=1

                  TIM_ClearOC2Ref PROC
;;;1732     */
;;;1733   void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;1734   {
;;;1735     uint16_t tmpccmr1 = 0;
;;;1736     /* Check the parameters */
;;;1737     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1738     assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
;;;1739     tmpccmr1 = TIMx->CCMR1;
;;;1740     /* Reset the OC2CE Bit */
;;;1741     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
;;;1742     /* Enable or Disable the Output Compare Clear Bit */
;;;1743     tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
000002  f64f73ff          MOV      r3,#0xffff
000006  f3c2020e          UBFX     r2,r2,#0,#15          ;1741
00000a  ea032101          AND      r1,r3,r1,LSL #8
00000e  4311              ORRS     r1,r1,r2
;;;1744     /* Write to TIMx CCMR1 register */
;;;1745     TIMx->CCMR1 = tmpccmr1;
000010  8301              STRH     r1,[r0,#0x18]
;;;1746   }
000012  4770              BX       lr
;;;1747   
                          ENDP


                          AREA ||i.TIM_ClearOC3Ref||, CODE, EXECONLY, ALIGN=1

                  TIM_ClearOC3Ref PROC
;;;1756     */
;;;1757   void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
000000  8b82              LDRH     r2,[r0,#0x1c]
;;;1758   {
;;;1759     uint16_t tmpccmr2 = 0;
;;;1760     /* Check the parameters */
;;;1761     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1762     assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
;;;1763     tmpccmr2 = TIMx->CCMR2;
;;;1764     /* Reset the OC3CE Bit */
;;;1765     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
000002  f0220280          BIC      r2,r2,#0x80
;;;1766     /* Enable or Disable the Output Compare Clear Bit */
;;;1767     tmpccmr2 |= TIM_OCClear;
000006  430a              ORRS     r2,r2,r1
;;;1768     /* Write to TIMx CCMR2 register */
;;;1769     TIMx->CCMR2 = tmpccmr2;
000008  8382              STRH     r2,[r0,#0x1c]
;;;1770   }
00000a  4770              BX       lr
;;;1771   
                          ENDP


                          AREA ||i.TIM_ClearOC4Ref||, CODE, EXECONLY, ALIGN=1

                  TIM_ClearOC4Ref PROC
;;;1780     */
;;;1781   void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
000000  8b82              LDRH     r2,[r0,#0x1c]
;;;1782   {
;;;1783     uint16_t tmpccmr2 = 0;
;;;1784     /* Check the parameters */
;;;1785     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1786     assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
;;;1787     tmpccmr2 = TIMx->CCMR2;
;;;1788     /* Reset the OC4CE Bit */
;;;1789     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
;;;1790     /* Enable or Disable the Output Compare Clear Bit */
;;;1791     tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
000002  f64f73ff          MOV      r3,#0xffff
000006  f3c2020e          UBFX     r2,r2,#0,#15          ;1789
00000a  ea032101          AND      r1,r3,r1,LSL #8
00000e  4311              ORRS     r1,r1,r2
;;;1792     /* Write to TIMx CCMR2 register */
;;;1793     TIMx->CCMR2 = tmpccmr2;
000010  8381              STRH     r1,[r0,#0x1c]
;;;1794   }
000012  4770              BX       lr
;;;1795   
                          ENDP


                          AREA ||i.TIM_Cmd||, CODE, EXECONLY, ALIGN=1

                  TIM_Cmd PROC
;;;805      */
;;;806    void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;807    {
;;;808      /* Check the parameters */
;;;809      assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;810      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;811      
;;;812      if (NewState != DISABLE)
;;;813      {
;;;814        /* Enable the TIM Counter */
;;;815        TIMx->CR1 |= TIM_CR1_CEN;
;;;816      }
;;;817      else
;;;818      {
;;;819        /* Disable the TIM Counter */
;;;820        TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
000002  8801              LDRH     r1,[r0,#0]
000004  d002              BEQ      |L15.12|
000006  f0410101          ORR      r1,r1,#1              ;815
00000a  e001              B        |L15.16|
                  |L15.12|
00000c  f0210101          BIC      r1,r1,#1
                  |L15.16|
000010  8001              STRH     r1,[r0,#0]            ;815
;;;821      }
;;;822    }
000012  4770              BX       lr
;;;823    
                          ENDP


                          AREA ||i.TIM_CounterModeConfig||, CODE, EXECONLY, ALIGN=1

                  TIM_CounterModeConfig PROC
;;;1198     */
;;;1199   void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
000000  8802              LDRH     r2,[r0,#0]
;;;1200   {
;;;1201     uint16_t tmpcr1 = 0;
;;;1202     /* Check the parameters */
;;;1203     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1204     assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
;;;1205     tmpcr1 = TIMx->CR1;
;;;1206     /* Reset the CMS and DIR Bits */
;;;1207     tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
000002  f0220270          BIC      r2,r2,#0x70
;;;1208     /* Set the Counter Mode */
;;;1209     tmpcr1 |= TIM_CounterMode;
000006  430a              ORRS     r2,r2,r1
;;;1210     /* Write to TIMx CR1 register */
;;;1211     TIMx->CR1 = tmpcr1;
000008  8002              STRH     r2,[r0,#0]
;;;1212   }
00000a  4770              BX       lr
;;;1213   
                          ENDP


                          AREA ||i.TIM_CtrlPWMOutputs||, CODE, EXECONLY, ALIGN=1

                  TIM_CtrlPWMOutputs PROC
;;;830      */
;;;831    void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;832    {
;;;833      /* Check the parameters */
;;;834      assert_param(IS_TIM_LIST2_PERIPH(TIMx));
;;;835      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;836      if (NewState != DISABLE)
;;;837      {
;;;838        /* Enable the TIM Main Output */
;;;839        TIMx->BDTR |= TIM_BDTR_MOE;
;;;840      }
;;;841      else
;;;842      {
;;;843        /* Disable the TIM Main Output */
;;;844        TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
000002  f8301f44          LDRH     r1,[r0,#0x44]!
000006  d002              BEQ      |L17.14|
000008  f4414100          ORR      r1,r1,#0x8000         ;839
00000c  e001              B        |L17.18|
                  |L17.14|
00000e  f3c1010e          UBFX     r1,r1,#0,#15
                  |L17.18|
000012  8001              STRH     r1,[r0,#0]            ;839
;;;845      }  
;;;846    }
000014  4770              BX       lr
;;;847    
                          ENDP


                          AREA ||i.TIM_DMACmd||, CODE, EXECONLY, ALIGN=1

                  TIM_DMACmd PROC
;;;963      */
;;;964    void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
000000  2a00              CMP      r2,#0
;;;965    { 
;;;966      /* Check the parameters */
;;;967      assert_param(IS_TIM_LIST9_PERIPH(TIMx));
;;;968      assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
;;;969      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;970      
;;;971      if (NewState != DISABLE)
;;;972      {
;;;973        /* Enable the DMA sources */
;;;974        TIMx->DIER |= TIM_DMASource; 
;;;975      }
;;;976      else
;;;977      {
;;;978        /* Disable the DMA sources */
;;;979        TIMx->DIER &= (uint16_t)~TIM_DMASource;
000002  8982              LDRH     r2,[r0,#0xc]
000004  d001              BEQ      |L18.10|
000006  430a              ORRS     r2,r2,r1              ;974
000008  e000              B        |L18.12|
                  |L18.10|
00000a  438a              BICS     r2,r2,r1
                  |L18.12|
00000c  8182              STRH     r2,[r0,#0xc]          ;974
;;;980      }
;;;981    }
00000e  4770              BX       lr
;;;982    
                          ENDP


                          AREA ||i.TIM_DMAConfig||, CODE, EXECONLY, ALIGN=1

                  TIM_DMAConfig PROC
;;;936      */
;;;937    void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
000000  4311              ORRS     r1,r1,r2
;;;938    {
;;;939      /* Check the parameters */
;;;940      assert_param(IS_TIM_LIST4_PERIPH(TIMx));
;;;941      assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
;;;942      assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
;;;943      /* Set the DMA Base and the DMA Burst Length */
;;;944      TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
000002  f8a01048          STRH     r1,[r0,#0x48]
;;;945    }
000006  4770              BX       lr
;;;946    
                          ENDP


                          AREA ||i.TIM_DeInit||, CODE, EXECONLY, ALIGN=1

                  TIM_DeInit PROC
;;;121      */
;;;122    void TIM_DeInit(TIM_TypeDef* TIMx)
000000  b510              PUSH     {r4,lr}
;;;123    {
;;;124      /* Check the parameters */
;;;125      assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
;;;126     
;;;127      if (TIMx == TIM1)
000002  f1a04180          SUB      r1,r0,#0x40000000
000006  f5b13196          SUBS     r1,r1,#0x12c00
00000a  d058              BEQ      |L20.190|
;;;128      {
;;;129        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
;;;130        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
;;;131      }     
;;;132      else if (TIMx == TIM2)
00000c  f1b04f80          CMP      r0,#0x40000000
000010  d05f              BEQ      |L20.210|
;;;133      {
;;;134        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
;;;135        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
;;;136      }
;;;137      else if (TIMx == TIM3)
000012  f1a04180          SUB      r1,r0,#0x40000000
000016  f5b16180          SUBS     r1,r1,#0x400
00001a  d053              BEQ      |L20.196|
;;;138      {
;;;139        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
;;;140        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
;;;141      }
;;;142      else if (TIMx == TIM4)
00001c  f1a04180          SUB      r1,r0,#0x40000000
000020  f5b16100          SUBS     r1,r1,#0x800
000024  d05c              BEQ      |L20.224|
;;;143      {
;;;144        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
;;;145        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
;;;146      } 
;;;147      else if (TIMx == TIM5)
000026  f1a04180          SUB      r1,r0,#0x40000000
00002a  f5b16140          SUBS     r1,r1,#0xc00
00002e  d05e              BEQ      |L20.238|
;;;148      {
;;;149        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
;;;150        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
;;;151      } 
;;;152      else if (TIMx == TIM6)
000030  f1a04180          SUB      r1,r0,#0x40000000
000034  f5b15180          SUBS     r1,r1,#0x1000
000038  d060              BEQ      |L20.252|
;;;153      {
;;;154        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
;;;155        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
;;;156      } 
;;;157      else if (TIMx == TIM7)
00003a  f1a04180          SUB      r1,r0,#0x40000000
00003e  f5b151a0          SUBS     r1,r1,#0x1400
000042  d062              BEQ      |L20.266|
;;;158      {
;;;159        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
;;;160        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
;;;161      } 
;;;162      else if (TIMx == TIM8)
000044  f1a04180          SUB      r1,r0,#0x40000000
000048  f5b1319a          SUBS     r1,r1,#0x13400
00004c  d064              BEQ      |L20.280|
;;;163      {
;;;164        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
;;;165        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
;;;166      }
;;;167      else if (TIMx == TIM9)
00004e  f1a04180          SUB      r1,r0,#0x40000000
000052  f5b131a6          SUBS     r1,r1,#0x14c00
000056  d062              BEQ      |L20.286|
;;;168      {      
;;;169        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
;;;170        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
;;;171       }  
;;;172      else if (TIMx == TIM10)
000058  f1a04180          SUB      r1,r0,#0x40000000
00005c  f5b131a8          SUBS     r1,r1,#0x15000
000060  d060              BEQ      |L20.292|
;;;173      {      
;;;174        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
;;;175        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
;;;176      }  
;;;177      else if (TIMx == TIM11) 
000062  f1a04180          SUB      r1,r0,#0x40000000
000066  f5b131aa          SUBS     r1,r1,#0x15400
00006a  d05e              BEQ      |L20.298|
;;;178      {     
;;;179        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
;;;180        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
;;;181      }  
;;;182      else if (TIMx == TIM12)
00006c  f1a04180          SUB      r1,r0,#0x40000000
000070  f5b151c0          SUBS     r1,r1,#0x1800
000074  d05c              BEQ      |L20.304|
;;;183      {      
;;;184        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
;;;185        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
;;;186      }  
;;;187      else if (TIMx == TIM13) 
000076  f1a04180          SUB      r1,r0,#0x40000000
00007a  f5b151e0          SUBS     r1,r1,#0x1c00
00007e  d05e              BEQ      |L20.318|
;;;188      {       
;;;189        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
;;;190        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
;;;191      }
;;;192      else if (TIMx == TIM14) 
000080  f1a04180          SUB      r1,r0,#0x40000000
000084  f5b15100          SUBS     r1,r1,#0x2000
000088  d060              BEQ      |L20.332|
;;;193      {       
;;;194        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
;;;195        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
;;;196      }        
;;;197      else if (TIMx == TIM15)
00008a  f1a04180          SUB      r1,r0,#0x40000000
00008e  f5b131a0          SUBS     r1,r1,#0x14000
000092  d066              BEQ      |L20.354|
;;;198      {
;;;199        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
;;;200        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
;;;201      } 
;;;202      else if (TIMx == TIM16)
000094  f1a04180          SUB      r1,r0,#0x40000000
000098  f5b131a2          SUBS     r1,r1,#0x14400
00009c  d064              BEQ      |L20.360|
;;;203      {
;;;204        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
;;;205        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
;;;206      } 
;;;207      else
;;;208      {
;;;209        if (TIMx == TIM17)
00009e  f1a04180          SUB      r1,r0,#0x40000000
0000a2  f5b131a4          SUBS     r1,r1,#0x14800
0000a6  d162              BNE      |L20.366|
;;;210        {
;;;211          RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
0000a8  2101              MOVS     r1,#1
0000aa  048c              LSLS     r4,r1,#18
                  |L20.172|
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;212          RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
0000b2  4620              MOV      r0,r4
0000b4  e8bd4010          POP      {r4,lr}
0000b8  2100              MOVS     r1,#0
0000ba  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L20.190|
0000be  2101              MOVS     r1,#1                 ;129
0000c0  02cc              LSLS     r4,r1,#11             ;129
0000c2  e7f3              B        |L20.172|
                  |L20.196|
0000c4  2101              MOVS     r1,#1                 ;139
0000c6  2002              MOVS     r0,#2                 ;139
0000c8  f7fffffe          BL       RCC_APB1PeriphResetCmd
0000cc  2100              MOVS     r1,#0                 ;140
0000ce  2002              MOVS     r0,#2                 ;140
0000d0  e043              B        |L20.346|
                  |L20.210|
0000d2  2101              MOVS     r1,#1                 ;134
0000d4  4608              MOV      r0,r1                 ;134
0000d6  f7fffffe          BL       RCC_APB1PeriphResetCmd
0000da  2100              MOVS     r1,#0                 ;135
0000dc  2001              MOVS     r0,#1                 ;135
0000de  e03c              B        |L20.346|
                  |L20.224|
0000e0  2101              MOVS     r1,#1                 ;144
0000e2  2004              MOVS     r0,#4                 ;144
0000e4  f7fffffe          BL       RCC_APB1PeriphResetCmd
0000e8  2100              MOVS     r1,#0                 ;145
0000ea  2004              MOVS     r0,#4                 ;145
0000ec  e035              B        |L20.346|
                  |L20.238|
0000ee  2101              MOVS     r1,#1                 ;149
0000f0  2008              MOVS     r0,#8                 ;149
0000f2  f7fffffe          BL       RCC_APB1PeriphResetCmd
0000f6  2100              MOVS     r1,#0                 ;150
0000f8  2008              MOVS     r0,#8                 ;150
0000fa  e02e              B        |L20.346|
                  |L20.252|
0000fc  2101              MOVS     r1,#1                 ;154
0000fe  2010              MOVS     r0,#0x10              ;154
000100  f7fffffe          BL       RCC_APB1PeriphResetCmd
000104  2100              MOVS     r1,#0                 ;155
000106  2010              MOVS     r0,#0x10              ;155
000108  e027              B        |L20.346|
                  |L20.266|
00010a  2101              MOVS     r1,#1                 ;159
00010c  2020              MOVS     r0,#0x20              ;159
00010e  f7fffffe          BL       RCC_APB1PeriphResetCmd
000112  2100              MOVS     r1,#0                 ;160
000114  2020              MOVS     r0,#0x20              ;160
000116  e020              B        |L20.346|
                  |L20.280|
000118  2101              MOVS     r1,#1                 ;164
00011a  034c              LSLS     r4,r1,#13             ;164
00011c  e7c6              B        |L20.172|
                  |L20.286|
00011e  2101              MOVS     r1,#1                 ;169
000120  04cc              LSLS     r4,r1,#19             ;169
000122  e7c3              B        |L20.172|
                  |L20.292|
000124  2101              MOVS     r1,#1                 ;174
000126  050c              LSLS     r4,r1,#20             ;174
000128  e7c0              B        |L20.172|
                  |L20.298|
00012a  2101              MOVS     r1,#1                 ;179
00012c  054c              LSLS     r4,r1,#21             ;179
00012e  e7bd              B        |L20.172|
                  |L20.304|
000130  2101              MOVS     r1,#1                 ;184
000132  2040              MOVS     r0,#0x40              ;184
000134  f7fffffe          BL       RCC_APB1PeriphResetCmd
000138  2100              MOVS     r1,#0                 ;185
00013a  2040              MOVS     r0,#0x40              ;185
00013c  e00d              B        |L20.346|
                  |L20.318|
00013e  2101              MOVS     r1,#1                 ;189
000140  2080              MOVS     r0,#0x80              ;189
000142  f7fffffe          BL       RCC_APB1PeriphResetCmd
000146  2100              MOVS     r1,#0                 ;190
000148  2080              MOVS     r0,#0x80              ;190
00014a  e006              B        |L20.346|
                  |L20.332|
00014c  2101              MOVS     r1,#1                 ;194
00014e  020c              LSLS     r4,r1,#8              ;194
000150  4620              MOV      r0,r4                 ;194
000152  f7fffffe          BL       RCC_APB1PeriphResetCmd
000156  2100              MOVS     r1,#0                 ;195
000158  4620              MOV      r0,r4                 ;195
                  |L20.346|
00015a  e8bd4010          POP      {r4,lr}               ;195
00015e  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L20.354|
000162  2101              MOVS     r1,#1                 ;199
000164  040c              LSLS     r4,r1,#16             ;199
000166  e7a1              B        |L20.172|
                  |L20.360|
000168  2101              MOVS     r1,#1                 ;204
00016a  044c              LSLS     r4,r1,#17             ;204
00016c  e79e              B        |L20.172|
                  |L20.366|
;;;213        }  
;;;214      }
;;;215    }
00016e  bd10              POP      {r4,pc}
;;;216    
                          ENDP


                          AREA ||i.TIM_ETRClockMode1Config||, CODE, EXECONLY, ALIGN=1

                  TIM_ETRClockMode1Config PROC
;;;1074     */
;;;1075   void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
000000  b510              PUSH     {r4,lr}
;;;1076                                uint16_t ExtTRGFilter)
;;;1077   {
000002  4604              MOV      r4,r0
;;;1078     uint16_t tmpsmcr = 0;
;;;1079     /* Check the parameters */
;;;1080     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1081     assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
;;;1082     assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
;;;1083     assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
;;;1084     /* Configure the ETR Clock source */
;;;1085     TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
000004  f7fffffe          BL       TIM_ETRConfig
;;;1086     
;;;1087     /* Get the TIMx SMCR register value */
;;;1088     tmpsmcr = TIMx->SMCR;
000008  8920              LDRH     r0,[r4,#8]
;;;1089     /* Reset the SMS Bits */
;;;1090     tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
;;;1091     /* Select the External clock mode1 */
;;;1092     tmpsmcr |= TIM_SlaveMode_External1;
;;;1093     /* Select the Trigger selection : ETRF */
;;;1094     tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
;;;1095     tmpsmcr |= TIM_TS_ETRF;
00000a  f0400077          ORR      r0,r0,#0x77
;;;1096     /* Write to TIMx SMCR */
;;;1097     TIMx->SMCR = tmpsmcr;
00000e  8120              STRH     r0,[r4,#8]
;;;1098   }
000010  bd10              POP      {r4,pc}
;;;1099   
                          ENDP


                          AREA ||i.TIM_ETRClockMode2Config||, CODE, EXECONLY, ALIGN=1

                  TIM_ETRClockMode2Config PROC
;;;1116     */
;;;1117   void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
000000  b510              PUSH     {r4,lr}
;;;1118                                uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
;;;1119   {
000002  4604              MOV      r4,r0
;;;1120     /* Check the parameters */
;;;1121     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1122     assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
;;;1123     assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
;;;1124     assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
;;;1125     /* Configure the ETR Clock source */
;;;1126     TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
000004  f7fffffe          BL       TIM_ETRConfig
;;;1127     /* Enable the External clock mode2 */
;;;1128     TIMx->SMCR |= TIM_SMCR_ECE;
000008  8920              LDRH     r0,[r4,#8]
00000a  f4404080          ORR      r0,r0,#0x4000
00000e  8120              STRH     r0,[r4,#8]
;;;1129   }
000010  bd10              POP      {r4,pc}
;;;1130   
                          ENDP


                          AREA ||i.TIM_ETRConfig||, CODE, EXECONLY, ALIGN=1

                  TIM_ETRConfig PROC
;;;1147     */
;;;1148   void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
000000  b530              PUSH     {r4,r5,lr}
;;;1149                      uint16_t ExtTRGFilter)
;;;1150   {
;;;1151     uint16_t tmpsmcr = 0;
;;;1152     /* Check the parameters */
;;;1153     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1154     assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
;;;1155     assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
;;;1156     assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
;;;1157     tmpsmcr = TIMx->SMCR;
000002  8904              LDRH     r4,[r0,#8]
;;;1158     /* Reset the ETR Bits */
;;;1159     tmpsmcr &= SMCR_ETR_Mask;
;;;1160     /* Set the Prescaler, the Filter value and the Polarity */
;;;1161     tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
000004  f64f75ff          MOV      r5,#0xffff
000008  ea052303          AND      r3,r5,r3,LSL #8
00000c  4313              ORRS     r3,r3,r2
00000e  b2e4              UXTB     r4,r4                 ;1159
000010  430b              ORRS     r3,r3,r1
000012  4323              ORRS     r3,r3,r4
;;;1162     /* Write to TIMx SMCR */
;;;1163     TIMx->SMCR = tmpsmcr;
000014  8103              STRH     r3,[r0,#8]
;;;1164   }
000016  bd30              POP      {r4,r5,pc}
;;;1165   
                          ENDP


                          AREA ||i.TIM_EncoderInterfaceConfig||, CODE, EXECONLY, ALIGN=1

                  TIM_EncoderInterfaceConfig PROC
;;;1263     */
;;;1264   void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
000000  b570              PUSH     {r4-r6,lr}
;;;1265                                   uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
;;;1266   {
;;;1267     uint16_t tmpsmcr = 0;
;;;1268     uint16_t tmpccmr1 = 0;
;;;1269     uint16_t tmpccer = 0;
;;;1270       
;;;1271     /* Check the parameters */
;;;1272     assert_param(IS_TIM_LIST5_PERIPH(TIMx));
;;;1273     assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
;;;1274     assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
;;;1275     assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));
;;;1276   
;;;1277     /* Get the TIMx SMCR register value */
;;;1278     tmpsmcr = TIMx->SMCR;
000002  8904              LDRH     r4,[r0,#8]
;;;1279     
;;;1280     /* Get the TIMx CCMR1 register value */
;;;1281     tmpccmr1 = TIMx->CCMR1;
000004  8b06              LDRH     r6,[r0,#0x18]
;;;1282     
;;;1283     /* Get the TIMx CCER register value */
;;;1284     tmpccer = TIMx->CCER;
000006  8c05              LDRH     r5,[r0,#0x20]
;;;1285     
;;;1286     /* Set the encoder Mode */
;;;1287     tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
000008  f0240407          BIC      r4,r4,#7
;;;1288     tmpsmcr |= TIM_EncoderMode;
00000c  430c              ORRS     r4,r4,r1
;;;1289     
;;;1290     /* Select the Capture Compare 1 and the Capture Compare 2 as input */
;;;1291     tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
00000e  f0260103          BIC      r1,r6,#3
000012  f4217140          BIC      r1,r1,#0x300
;;;1292     tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
000016  f2401601          MOV      r6,#0x101
00001a  4331              ORRS     r1,r1,r6
;;;1293     
;;;1294     /* Set the TI1 and the TI2 Polarities */
;;;1295     tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
;;;1296     tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
00001c  f64f76ff          MOV      r6,#0xffff
000020  ea061303          AND      r3,r6,r3,LSL #4
000024  f0250522          BIC      r5,r5,#0x22           ;1295
000028  4313              ORRS     r3,r3,r2
00002a  432b              ORRS     r3,r3,r5
;;;1297     
;;;1298     /* Write to TIMx SMCR */
;;;1299     TIMx->SMCR = tmpsmcr;
00002c  8104              STRH     r4,[r0,#8]
;;;1300     /* Write to TIMx CCMR1 */
;;;1301     TIMx->CCMR1 = tmpccmr1;
00002e  8301              STRH     r1,[r0,#0x18]
;;;1302     /* Write to TIMx CCER */
;;;1303     TIMx->CCER = tmpccer;
000030  8403              STRH     r3,[r0,#0x20]
;;;1304   }
000032  bd70              POP      {r4-r6,pc}
;;;1305   
                          ENDP


                          AREA ||i.TIM_ForcedOC1Config||, CODE, EXECONLY, ALIGN=1

                  TIM_ForcedOC1Config PROC
;;;1314     */
;;;1315   void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;1316   {
;;;1317     uint16_t tmpccmr1 = 0;
;;;1318     /* Check the parameters */
;;;1319     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;1320     assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
;;;1321     tmpccmr1 = TIMx->CCMR1;
;;;1322     /* Reset the OC1M Bits */
;;;1323     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
000002  f0220270          BIC      r2,r2,#0x70
;;;1324     /* Configure The Forced output Mode */
;;;1325     tmpccmr1 |= TIM_ForcedAction;
000006  430a              ORRS     r2,r2,r1
;;;1326     /* Write to TIMx CCMR1 register */
;;;1327     TIMx->CCMR1 = tmpccmr1;
000008  8302              STRH     r2,[r0,#0x18]
;;;1328   }
00000a  4770              BX       lr
;;;1329   
                          ENDP


                          AREA ||i.TIM_ForcedOC2Config||, CODE, EXECONLY, ALIGN=1

                  TIM_ForcedOC2Config PROC
;;;1338     */
;;;1339   void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;1340   {
;;;1341     uint16_t tmpccmr1 = 0;
;;;1342     /* Check the parameters */
;;;1343     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;1344     assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
;;;1345     tmpccmr1 = TIMx->CCMR1;
;;;1346     /* Reset the OC2M Bits */
;;;1347     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
;;;1348     /* Configure The Forced output Mode */
;;;1349     tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
000002  f64f73ff          MOV      r3,#0xffff
000006  f42242e0          BIC      r2,r2,#0x7000         ;1347
00000a  ea032101          AND      r1,r3,r1,LSL #8
00000e  4311              ORRS     r1,r1,r2
;;;1350     /* Write to TIMx CCMR1 register */
;;;1351     TIMx->CCMR1 = tmpccmr1;
000010  8301              STRH     r1,[r0,#0x18]
;;;1352   }
000012  4770              BX       lr
;;;1353   
                          ENDP


                          AREA ||i.TIM_ForcedOC3Config||, CODE, EXECONLY, ALIGN=1

                  TIM_ForcedOC3Config PROC
;;;1362     */
;;;1363   void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
000000  8b82              LDRH     r2,[r0,#0x1c]
;;;1364   {
;;;1365     uint16_t tmpccmr2 = 0;
;;;1366     /* Check the parameters */
;;;1367     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1368     assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
;;;1369     tmpccmr2 = TIMx->CCMR2;
;;;1370     /* Reset the OC1M Bits */
;;;1371     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
000002  f0220270          BIC      r2,r2,#0x70
;;;1372     /* Configure The Forced output Mode */
;;;1373     tmpccmr2 |= TIM_ForcedAction;
000006  430a              ORRS     r2,r2,r1
;;;1374     /* Write to TIMx CCMR2 register */
;;;1375     TIMx->CCMR2 = tmpccmr2;
000008  8382              STRH     r2,[r0,#0x1c]
;;;1376   }
00000a  4770              BX       lr
;;;1377   
                          ENDP


                          AREA ||i.TIM_ForcedOC4Config||, CODE, EXECONLY, ALIGN=1

                  TIM_ForcedOC4Config PROC
;;;1386     */
;;;1387   void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
000000  8b82              LDRH     r2,[r0,#0x1c]
;;;1388   {
;;;1389     uint16_t tmpccmr2 = 0;
;;;1390     /* Check the parameters */
;;;1391     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1392     assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
;;;1393     tmpccmr2 = TIMx->CCMR2;
;;;1394     /* Reset the OC2M Bits */
;;;1395     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
;;;1396     /* Configure The Forced output Mode */
;;;1397     tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
000002  f64f73ff          MOV      r3,#0xffff
000006  f42242e0          BIC      r2,r2,#0x7000         ;1395
00000a  ea032101          AND      r1,r3,r1,LSL #8
00000e  4311              ORRS     r1,r1,r2
;;;1398     /* Write to TIMx CCMR2 register */
;;;1399     TIMx->CCMR2 = tmpccmr2;
000010  8381              STRH     r1,[r0,#0x1c]
;;;1400   }
000012  4770              BX       lr
;;;1401   
                          ENDP


                          AREA ||i.TIM_GenerateEvent||, CODE, EXECONLY, ALIGN=1

                  TIM_GenerateEvent PROC
;;;908      */
;;;909    void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
000000  8281              STRH     r1,[r0,#0x14]
;;;910    { 
;;;911      /* Check the parameters */
;;;912      assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;913      assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
;;;914      
;;;915      /* Set the event sources */
;;;916      TIMx->EGR = TIM_EventSource;
;;;917    }
000002  4770              BX       lr
;;;918    
                          ENDP


                          AREA ||i.TIM_GetCapture1||, CODE, EXECONLY, ALIGN=1

                  TIM_GetCapture1 PROC
;;;2456     */
;;;2457   uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
000000  8e80              LDRH     r0,[r0,#0x34]
;;;2458   {
;;;2459     /* Check the parameters */
;;;2460     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;2461     /* Get the Capture 1 Register value */
;;;2462     return TIMx->CCR1;
;;;2463   }
000002  4770              BX       lr
;;;2464   
                          ENDP


                          AREA ||i.TIM_GetCapture2||, CODE, EXECONLY, ALIGN=1

                  TIM_GetCapture2 PROC
;;;2469     */
;;;2470   uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
000000  8f00              LDRH     r0,[r0,#0x38]
;;;2471   {
;;;2472     /* Check the parameters */
;;;2473     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;2474     /* Get the Capture 2 Register value */
;;;2475     return TIMx->CCR2;
;;;2476   }
000002  4770              BX       lr
;;;2477   
                          ENDP


                          AREA ||i.TIM_GetCapture3||, CODE, EXECONLY, ALIGN=1

                  TIM_GetCapture3 PROC
;;;2482     */
;;;2483   uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
000000  8f80              LDRH     r0,[r0,#0x3c]
;;;2484   {
;;;2485     /* Check the parameters */
;;;2486     assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
;;;2487     /* Get the Capture 3 Register value */
;;;2488     return TIMx->CCR3;
;;;2489   }
000002  4770              BX       lr
;;;2490   
                          ENDP


                          AREA ||i.TIM_GetCapture4||, CODE, EXECONLY, ALIGN=1

                  TIM_GetCapture4 PROC
;;;2495     */
;;;2496   uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
000000  f8b00040          LDRH     r0,[r0,#0x40]
;;;2497   {
;;;2498     /* Check the parameters */
;;;2499     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;2500     /* Get the Capture 4 Register value */
;;;2501     return TIMx->CCR4;
;;;2502   }
000004  4770              BX       lr
;;;2503   
                          ENDP


                          AREA ||i.TIM_GetCounter||, CODE, EXECONLY, ALIGN=1

                  TIM_GetCounter PROC
;;;2508     */
;;;2509   uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
000000  8c80              LDRH     r0,[r0,#0x24]
;;;2510   {
;;;2511     /* Check the parameters */
;;;2512     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2513     /* Get the Counter Register value */
;;;2514     return TIMx->CNT;
;;;2515   }
000002  4770              BX       lr
;;;2516   
                          ENDP


                          AREA ||i.TIM_GetFlagStatus||, CODE, EXECONLY, ALIGN=1

                  TIM_GetFlagStatus PROC
;;;2555     */
;;;2556   FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
000000  4602              MOV      r2,r0
;;;2557   { 
;;;2558     ITStatus bitstatus = RESET;  
000002  2000              MOVS     r0,#0
;;;2559     /* Check the parameters */
;;;2560     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2561     assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
;;;2562     
;;;2563     if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
000004  8a12              LDRH     r2,[r2,#0x10]
000006  420a              TST      r2,r1
000008  d000              BEQ      |L35.12|
;;;2564     {
;;;2565       bitstatus = SET;
00000a  2001              MOVS     r0,#1
                  |L35.12|
;;;2566     }
;;;2567     else
;;;2568     {
;;;2569       bitstatus = RESET;
;;;2570     }
;;;2571     return bitstatus;
;;;2572   }
00000c  4770              BX       lr
;;;2573   
                          ENDP


                          AREA ||i.TIM_GetITStatus||, CODE, EXECONLY, ALIGN=1

                  TIM_GetITStatus PROC
;;;2631     */
;;;2632   ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
000000  4602              MOV      r2,r0
;;;2633   {
;;;2634     ITStatus bitstatus = RESET;  
000002  2000              MOVS     r0,#0
;;;2635     uint16_t itstatus = 0x0, itenable = 0x0;
;;;2636     /* Check the parameters */
;;;2637     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2638     assert_param(IS_TIM_GET_IT(TIM_IT));
;;;2639      
;;;2640     itstatus = TIMx->SR & TIM_IT;
000004  8a13              LDRH     r3,[r2,#0x10]
;;;2641     
;;;2642     itenable = TIMx->DIER & TIM_IT;
000006  8992              LDRH     r2,[r2,#0xc]
000008  420b              TST      r3,r1                 ;2640
00000a  ea020201          AND      r2,r2,r1
00000e  d002              BEQ      |L36.22|
;;;2643     if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
000010  2a00              CMP      r2,#0
000012  d000              BEQ      |L36.22|
;;;2644     {
;;;2645       bitstatus = SET;
000014  2001              MOVS     r0,#1
                  |L36.22|
;;;2646     }
;;;2647     else
;;;2648     {
;;;2649       bitstatus = RESET;
;;;2650     }
;;;2651     return bitstatus;
;;;2652   }
000016  4770              BX       lr
;;;2653   
                          ENDP


                          AREA ||i.TIM_GetPrescaler||, CODE, EXECONLY, ALIGN=1

                  TIM_GetPrescaler PROC
;;;2521     */
;;;2522   uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
000000  8d00              LDRH     r0,[r0,#0x28]
;;;2523   {
;;;2524     /* Check the parameters */
;;;2525     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2526     /* Get the Prescaler Register value */
;;;2527     return TIMx->PSC;
;;;2528   }
000002  4770              BX       lr
;;;2529   
                          ENDP


                          AREA ||i.TIM_ICInit||, CODE, EXECONLY, ALIGN=1

                  TIM_ICInit PROC
;;;586      */
;;;587    void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;588    {
000004  460d              MOV      r5,r1
000006  4604              MOV      r4,r0
;;;589      /* Check the parameters */
;;;590      assert_param(IS_TIM_CHANNEL(TIM_ICInitStruct->TIM_Channel));  
;;;591      assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
;;;592      assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
;;;593      assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
;;;594      
;;;595      if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
;;;596         (TIMx == TIM4) ||(TIMx == TIM5))
;;;597      {
;;;598        assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
;;;599      }
;;;600      else
;;;601      {
;;;602        assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
;;;603      }
;;;604      if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
000008  8808              LDRH     r0,[r1,#0]
00000a  f44f5730          MOV      r7,#0x2c00            ;595
00000e  f44f5c50          MOV      r12,#0x3400           ;595
000012  f44f6880          MOV      r8,#0x400             ;595
000016  f44f6900          MOV      r9,#0x800             ;596
;;;605      {
;;;606        assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;607        /* TI1 Configuration */
;;;608        TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
00001a  8849              LDRH     r1,[r1,#2]
00001c  88aa              LDRH     r2,[r5,#4]
00001e  892b              LDRH     r3,[r5,#8]
000020  f2c40701          MOVT     r7,#0x4001            ;595
000024  f2c40c01          MOVT     r12,#0x4001           ;595
000028  f04f4a80          MOV      r10,#0x40000000       ;595
00002c  f2c40800          MOVT     r8,#0x4000            ;595
000030  f2c40900          MOVT     r9,#0x4000            ;596
000034  b3c0              CBZ      r0,|L38.168|
;;;609                   TIM_ICInitStruct->TIM_ICSelection,
;;;610                   TIM_ICInitStruct->TIM_ICFilter);
;;;611        /* Set the Input Capture Prescaler value */
;;;612        TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
;;;613      }
;;;614      else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
000036  2804              CMP      r0,#4
000038  d040              BEQ      |L38.188|
00003a  f64f76ff          MOV      r6,#0xffff
;;;615      {
;;;616        assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;617        /* TI2 Configuration */
;;;618        TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
;;;619                   TIM_ICInitStruct->TIM_ICSelection,
;;;620                   TIM_ICInitStruct->TIM_ICFilter);
;;;621        /* Set the Input Capture Prescaler value */
;;;622        TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
;;;623      }
;;;624      else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
00003e  2808              CMP      r0,#8
;;;625      {
;;;626        assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;627        /* TI3 Configuration */
;;;628        TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
;;;629                   TIM_ICInitStruct->TIM_ICSelection,
;;;630                   TIM_ICInitStruct->TIM_ICFilter);
;;;631        /* Set the Input Capture Prescaler value */
;;;632        TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
;;;633      }
;;;634      else
;;;635      {
;;;636        assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;637        /* TI4 Configuration */
;;;638        TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
000040  4693              MOV      r11,r2
000042  d044              BEQ      |L38.206|
000044  8c20              LDRH     r0,[r4,#0x20]         ;624
000046  469e              MOV      lr,r3
000048  f4205080          BIC      r0,r0,#0x1000
00004c  8420              STRH     r0,[r4,#0x20]
00004e  8ba3              LDRH     r3,[r4,#0x1c]
000050  8c20              LDRH     r0,[r4,#0x20]
000052  ea063201          AND      r2,r6,r1,LSL #12
000056  9200              STR      r2,[sp,#0]
000058  f4234373          BIC      r3,r3,#0xf300
00005c  ea06220b          AND      r2,r6,r11,LSL #8
000060  431a              ORRS     r2,r2,r3
000062  ea06330e          AND      r3,r6,lr,LSL #12
000066  4313              ORRS     r3,r3,r2
000068  42bc              CMP      r4,r7
00006a  d019              BEQ      |L38.160|
00006c  4564              CMP      r4,r12
00006e  d017              BEQ      |L38.160|
000070  4554              CMP      r4,r10
000072  d015              BEQ      |L38.160|
000074  4544              CMP      r4,r8
000076  d013              BEQ      |L38.160|
000078  454c              CMP      r4,r9
00007a  d011              BEQ      |L38.160|
00007c  f1a44280          SUB      r2,r4,#0x40000000
000080  f5b26240          SUBS     r2,r2,#0xc00
000084  d00c              BEQ      |L38.160|
000086  f4204002          BIC      r0,r0,#0x8200
                  |L38.138|
00008a  4308              ORRS     r0,r0,r1
00008c  f4405080          ORR      r0,r0,#0x1000
000090  83a3              STRH     r3,[r4,#0x1c]
000092  8420              STRH     r0,[r4,#0x20]
;;;639                   TIM_ICInitStruct->TIM_ICSelection,
;;;640                   TIM_ICInitStruct->TIM_ICFilter);
;;;641        /* Set the Input Capture Prescaler value */
;;;642        TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
000094  88e9              LDRH     r1,[r5,#6]
000096  4620              MOV      r0,r4
000098  e8bd4ff8          POP      {r3-r11,lr}
00009c  f7ffbffe          B.W      TIM_SetIC4Prescaler
                  |L38.160|
0000a0  f4205000          BIC      r0,r0,#0x2000
0000a4  9900              LDR      r1,[sp,#0]
0000a6  e7f0              B        |L38.138|
                  |L38.168|
0000a8  e7ff              B        |L38.170|
                  |L38.170|
0000aa  4620              MOV      r0,r4                 ;608
0000ac  f7fffffe          BL       TI1_Config
0000b0  88e9              LDRH     r1,[r5,#6]            ;612
0000b2  4620              MOV      r0,r4                 ;612
0000b4  e8bd4ff8          POP      {r3-r11,lr}           ;612
0000b8  f7ffbffe          B.W      TIM_SetIC1Prescaler
                  |L38.188|
0000bc  4620              MOV      r0,r4                 ;618
0000be  f7fffffe          BL       TI2_Config
0000c2  88e9              LDRH     r1,[r5,#6]            ;622
0000c4  4620              MOV      r0,r4                 ;622
0000c6  e8bd4ff8          POP      {r3-r11,lr}           ;622
0000ca  f7ffbffe          B.W      TIM_SetIC2Prescaler
                  |L38.206|
0000ce  8c20              LDRH     r0,[r4,#0x20]         ;622
0000d0  f4207080          BIC      r0,r0,#0x100          ;622
0000d4  8420              STRH     r0,[r4,#0x20]         ;622
0000d6  f8b4e01c          LDRH     lr,[r4,#0x1c]         ;622
0000da  8c20              LDRH     r0,[r4,#0x20]         ;622
0000dc  ea061303          AND      r3,r6,r3,LSL #4       ;622
0000e0  ea062201          AND      r2,r6,r1,LSL #8       ;622
0000e4  f02e0ef3          BIC      lr,lr,#0xf3           ;622
0000e8  ea43030b          ORR      r3,r3,r11             ;622
0000ec  ea43030e          ORR      r3,r3,lr              ;622
0000f0  9200              STR      r2,[sp,#0]            ;622
0000f2  42bc              CMP      r4,r7                 ;622
0000f4  d019              BEQ      |L38.298|
0000f6  4564              CMP      r4,r12                ;628
0000f8  d017              BEQ      |L38.298|
0000fa  4554              CMP      r4,r10                ;628
0000fc  d015              BEQ      |L38.298|
0000fe  4544              CMP      r4,r8                 ;628
000100  d013              BEQ      |L38.298|
000102  454c              CMP      r4,r9                 ;628
000104  d011              BEQ      |L38.298|
000106  f1a44280          SUB      r2,r4,#0x40000000     ;628
00010a  f5b26240          SUBS     r2,r2,#0xc00          ;628
00010e  d00c              BEQ      |L38.298|
000110  f4206020          BIC      r0,r0,#0xa00          ;628
                  |L38.276|
000114  4308              ORRS     r0,r0,r1              ;628
000116  f4407080          ORR      r0,r0,#0x100          ;628
00011a  83a3              STRH     r3,[r4,#0x1c]         ;628
00011c  8420              STRH     r0,[r4,#0x20]         ;628
00011e  88e9              LDRH     r1,[r5,#6]            ;632
000120  4620              MOV      r0,r4                 ;632
000122  e8bd4ff8          POP      {r3-r11,lr}           ;632
000126  f7ffbffe          B.W      TIM_SetIC3Prescaler
                  |L38.298|
00012a  f4207000          BIC      r0,r0,#0x200          ;632
00012e  9900              LDR      r1,[sp,#0]            ;632
000130  e7f0              B        |L38.276|
;;;643      }
;;;644    }
;;;645    
                          ENDP


                          AREA ||i.TIM_ICStructInit||, CODE, EXECONLY, ALIGN=1

                  TIM_ICStructInit PROC
;;;770      */
;;;771    void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
000000  2100              MOVS     r1,#0
;;;772    {
;;;773      /* Set the default configuration */
;;;774      TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
000002  8001              STRH     r1,[r0,#0]
;;;775      TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
000004  8041              STRH     r1,[r0,#2]
;;;776      TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
000006  2201              MOVS     r2,#1
000008  8082              STRH     r2,[r0,#4]
;;;777      TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
00000a  80c1              STRH     r1,[r0,#6]
;;;778      TIM_ICInitStruct->TIM_ICFilter = 0x00;
00000c  8101              STRH     r1,[r0,#8]
;;;779    }
00000e  4770              BX       lr
;;;780    
                          ENDP


                          AREA ||i.TIM_ITConfig||, CODE, EXECONLY, ALIGN=1

                  TIM_ITConfig PROC
;;;871      */
;;;872    void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
000000  2a00              CMP      r2,#0
;;;873    {  
;;;874      /* Check the parameters */
;;;875      assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;876      assert_param(IS_TIM_IT(TIM_IT));
;;;877      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;878      
;;;879      if (NewState != DISABLE)
;;;880      {
;;;881        /* Enable the Interrupt sources */
;;;882        TIMx->DIER |= TIM_IT;
;;;883      }
;;;884      else
;;;885      {
;;;886        /* Disable the Interrupt sources */
;;;887        TIMx->DIER &= (uint16_t)~TIM_IT;
000002  8982              LDRH     r2,[r0,#0xc]
000004  d001              BEQ      |L40.10|
000006  430a              ORRS     r2,r2,r1              ;882
000008  e000              B        |L40.12|
                  |L40.10|
00000a  438a              BICS     r2,r2,r1
                  |L40.12|
00000c  8182              STRH     r2,[r0,#0xc]          ;882
;;;888      }
;;;889    }
00000e  4770              BX       lr
;;;890    
                          ENDP


                          AREA ||i.TIM_ITRxExternalClockConfig||, CODE, EXECONLY, ALIGN=1

                  TIM_ITRxExternalClockConfig PROC
;;;1007     */
;;;1008   void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
000000  b500              PUSH     {lr}
;;;1009   {
000002  4603              MOV      r3,r0
;;;1010     /* Check the parameters */
;;;1011     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;1012     assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
;;;1013     /* Select the Internal Trigger */
;;;1014     TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
000004  f7fffffe          BL       TIM_SelectInputTrigger
;;;1015     /* Select the External clock mode1 */
;;;1016     TIMx->SMCR |= TIM_SlaveMode_External1;
000008  8918              LDRH     r0,[r3,#8]
00000a  f0400007          ORR      r0,r0,#7
00000e  8118              STRH     r0,[r3,#8]
;;;1017   }
000010  bd00              POP      {pc}
;;;1018   
                          ENDP


                          AREA ||i.TIM_InternalClockConfig||, CODE, EXECONLY, ALIGN=1

                  TIM_InternalClockConfig PROC
;;;988      */
;;;989    void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
000000  8901              LDRH     r1,[r0,#8]
;;;990    {
;;;991      /* Check the parameters */
;;;992      assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;993      /* Disable slave mode to clock the prescaler directly with the internal clock */
;;;994      TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
000002  f0210107          BIC      r1,r1,#7
000006  8101              STRH     r1,[r0,#8]
;;;995    }
000008  4770              BX       lr
;;;996    
                          ENDP


                          AREA ||i.TIM_OC1FastConfig||, CODE, EXECONLY, ALIGN=1

                  TIM_OC1FastConfig PROC
;;;1605     */
;;;1606   void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;1607   {
;;;1608     uint16_t tmpccmr1 = 0;
;;;1609     /* Check the parameters */
;;;1610     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;1611     assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
;;;1612     /* Get the TIMx CCMR1 register value */
;;;1613     tmpccmr1 = TIMx->CCMR1;
;;;1614     /* Reset the OC1FE Bit */
;;;1615     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
000002  f0220204          BIC      r2,r2,#4
;;;1616     /* Enable or Disable the Output Compare Fast Bit */
;;;1617     tmpccmr1 |= TIM_OCFast;
000006  430a              ORRS     r2,r2,r1
;;;1618     /* Write to TIMx CCMR1 */
;;;1619     TIMx->CCMR1 = tmpccmr1;
000008  8302              STRH     r2,[r0,#0x18]
;;;1620   }
00000a  4770              BX       lr
;;;1621   
                          ENDP


                          AREA ||i.TIM_OC1Init||, CODE, EXECONLY, ALIGN=1

                  TIM_OC1Init PROC
;;;278      */
;;;279    void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;280    {
;;;281      uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
;;;282       
;;;283      /* Check the parameters */
;;;284      assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;285      assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
;;;286      assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
;;;287      assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
;;;288     /* Disable the Channel 1: Reset the CC1E Bit */
;;;289      TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
000002  8c02              LDRH     r2,[r0,#0x20]
000004  f0220201          BIC      r2,r2,#1
000008  8402              STRH     r2,[r0,#0x20]
;;;290      /* Get the TIMx CCER register value */
;;;291      tmpccer = TIMx->CCER;
00000a  8c02              LDRH     r2,[r0,#0x20]
;;;292      /* Get the TIMx CR2 register value */
;;;293      tmpcr2 =  TIMx->CR2;
00000c  8883              LDRH     r3,[r0,#4]
;;;294      
;;;295      /* Get the TIMx CCMR1 register value */
;;;296      tmpccmrx = TIMx->CCMR1;
00000e  8b04              LDRH     r4,[r0,#0x18]
;;;297        
;;;298      /* Reset the Output Compare Mode Bits */
;;;299      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
;;;300      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
;;;301    
;;;302      /* Select the Output Compare Mode */
;;;303      tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
;;;304      
;;;305      /* Reset the Output Polarity level */
;;;306      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
000010  f0220202          BIC      r2,r2,#2
000014  f0240573          BIC      r5,r4,#0x73           ;300
000018  880c              LDRH     r4,[r1,#0]            ;303
00001a  432c              ORRS     r4,r4,r5              ;303
;;;307      /* Set the Output Compare Polarity */
;;;308      tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
00001c  890d              LDRH     r5,[r1,#8]
00001e  4315              ORRS     r5,r5,r2
;;;309      
;;;310      /* Set the Output State */
;;;311      tmpccer |= TIM_OCInitStruct->TIM_OutputState;
000020  884a              LDRH     r2,[r1,#2]
000022  432a              ORRS     r2,r2,r5
;;;312        
;;;313      if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
000024  f1a04580          SUB      r5,r0,#0x40000000
000028  f5b53596          SUBS     r5,r5,#0x12c00
00002c  d013              BEQ      |L44.86|
00002e  f1a04580          SUB      r5,r0,#0x40000000
000032  f5b5359a          SUBS     r5,r5,#0x13400
000036  d00e              BEQ      |L44.86|
000038  f1a04580          SUB      r5,r0,#0x40000000
00003c  f5b535a0          SUBS     r5,r5,#0x14000
000040  d009              BEQ      |L44.86|
;;;314         (TIMx == TIM16)|| (TIMx == TIM17))
000042  f1a04580          SUB      r5,r0,#0x40000000
000046  f5b535a2          SUBS     r5,r5,#0x14400
00004a  d004              BEQ      |L44.86|
00004c  f1a04580          SUB      r5,r0,#0x40000000
000050  f5b535a4          SUBS     r5,r5,#0x14800
000054  d10d              BNE      |L44.114|
                  |L44.86|
;;;315      {
;;;316        assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
;;;317        assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
;;;318        assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
;;;319        assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
;;;320        
;;;321        /* Reset the Output N Polarity level */
;;;322        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
000056  f0220508          BIC      r5,r2,#8
;;;323        /* Set the Output N Polarity */
;;;324        tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
00005a  894a              LDRH     r2,[r1,#0xa]
;;;325        
;;;326        /* Reset the Output N State */
;;;327        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
;;;328        /* Set the Output N State */
;;;329        tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
;;;330        
;;;331        /* Reset the Output Compare and Output Compare N IDLE State */
;;;332        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
;;;333        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
00005c  f4237340          BIC      r3,r3,#0x300
000060  432a              ORRS     r2,r2,r5              ;324
000062  f0220504          BIC      r5,r2,#4              ;327
000066  888a              LDRH     r2,[r1,#4]            ;329
000068  432a              ORRS     r2,r2,r5              ;329
;;;334        
;;;335        /* Set the Output Idle state */
;;;336        tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
00006a  898d              LDRH     r5,[r1,#0xc]
00006c  431d              ORRS     r5,r5,r3
;;;337        /* Set the Output N Idle state */
;;;338        tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
00006e  89cb              LDRH     r3,[r1,#0xe]
000070  432b              ORRS     r3,r3,r5
                  |L44.114|
;;;339      }
;;;340      /* Write to TIMx CR2 */
;;;341      TIMx->CR2 = tmpcr2;
000072  8083              STRH     r3,[r0,#4]
;;;342      
;;;343      /* Write to TIMx CCMR1 */
;;;344      TIMx->CCMR1 = tmpccmrx;
000074  8304              STRH     r4,[r0,#0x18]
;;;345    
;;;346      /* Set the Capture Compare Register value */
;;;347      TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
000076  88c9              LDRH     r1,[r1,#6]
000078  8681              STRH     r1,[r0,#0x34]
;;;348     
;;;349      /* Write to TIMx CCER */
;;;350      TIMx->CCER = tmpccer;
00007a  8402              STRH     r2,[r0,#0x20]
;;;351    }
00007c  bd30              POP      {r4,r5,pc}
;;;352    
                          ENDP


                          AREA ||i.TIM_OC1NPolarityConfig||, CODE, EXECONLY, ALIGN=1

                  TIM_OC1NPolarityConfig PROC
;;;1827     */
;;;1828   void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
000000  8c02              LDRH     r2,[r0,#0x20]
;;;1829   {
;;;1830     uint16_t tmpccer = 0;
;;;1831     /* Check the parameters */
;;;1832     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
;;;1833     assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
;;;1834      
;;;1835     tmpccer = TIMx->CCER;
;;;1836     /* Set or Reset the CC1NP Bit */
;;;1837     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
000002  f0220208          BIC      r2,r2,#8
;;;1838     tmpccer |= TIM_OCNPolarity;
000006  430a              ORRS     r2,r2,r1
;;;1839     /* Write to TIMx CCER register */
;;;1840     TIMx->CCER = tmpccer;
000008  8402              STRH     r2,[r0,#0x20]
;;;1841   }
00000a  4770              BX       lr
;;;1842   
                          ENDP


                          AREA ||i.TIM_OC1PolarityConfig||, CODE, EXECONLY, ALIGN=1

                  TIM_OC1PolarityConfig PROC
;;;1804     */
;;;1805   void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
000000  8c02              LDRH     r2,[r0,#0x20]
;;;1806   {
;;;1807     uint16_t tmpccer = 0;
;;;1808     /* Check the parameters */
;;;1809     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;1810     assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
;;;1811     tmpccer = TIMx->CCER;
;;;1812     /* Set or Reset the CC1P Bit */
;;;1813     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
000002  f0220202          BIC      r2,r2,#2
;;;1814     tmpccer |= TIM_OCPolarity;
000006  430a              ORRS     r2,r2,r1
;;;1815     /* Write to TIMx CCER register */
;;;1816     TIMx->CCER = tmpccer;
000008  8402              STRH     r2,[r0,#0x20]
;;;1817   }
00000a  4770              BX       lr
;;;1818   
                          ENDP


                          AREA ||i.TIM_OC1PreloadConfig||, CODE, EXECONLY, ALIGN=1

                  TIM_OC1PreloadConfig PROC
;;;1508     */
;;;1509   void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;1510   {
;;;1511     uint16_t tmpccmr1 = 0;
;;;1512     /* Check the parameters */
;;;1513     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;1514     assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
;;;1515     tmpccmr1 = TIMx->CCMR1;
;;;1516     /* Reset the OC1PE Bit */
;;;1517     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
000002  f0220208          BIC      r2,r2,#8
;;;1518     /* Enable or Disable the Output Compare Preload feature */
;;;1519     tmpccmr1 |= TIM_OCPreload;
000006  430a              ORRS     r2,r2,r1
;;;1520     /* Write to TIMx CCMR1 register */
;;;1521     TIMx->CCMR1 = tmpccmr1;
000008  8302              STRH     r2,[r0,#0x18]
;;;1522   }
00000a  4770              BX       lr
;;;1523   
                          ENDP


                          AREA ||i.TIM_OC2FastConfig||, CODE, EXECONLY, ALIGN=1

                  TIM_OC2FastConfig PROC
;;;1631     */
;;;1632   void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;1633   {
;;;1634     uint16_t tmpccmr1 = 0;
;;;1635     /* Check the parameters */
;;;1636     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;1637     assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
;;;1638     /* Get the TIMx CCMR1 register value */
;;;1639     tmpccmr1 = TIMx->CCMR1;
;;;1640     /* Reset the OC2FE Bit */
;;;1641     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
;;;1642     /* Enable or Disable the Output Compare Fast Bit */
;;;1643     tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
000002  f64f73ff          MOV      r3,#0xffff
000006  f4226280          BIC      r2,r2,#0x400          ;1641
00000a  ea032101          AND      r1,r3,r1,LSL #8
00000e  4311              ORRS     r1,r1,r2
;;;1644     /* Write to TIMx CCMR1 */
;;;1645     TIMx->CCMR1 = tmpccmr1;
000010  8301              STRH     r1,[r0,#0x18]
;;;1646   }
000012  4770              BX       lr
;;;1647   
                          ENDP


                          AREA ||i.TIM_OC2Init||, CODE, EXECONLY, ALIGN=1

                  TIM_OC2Init PROC
;;;361      */
;;;362    void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;363    {
;;;364      uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
;;;365       
;;;366      /* Check the parameters */
;;;367      assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
;;;368      assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
;;;369      assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
;;;370      assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
;;;371       /* Disable the Channel 2: Reset the CC2E Bit */
;;;372      TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
000002  8c02              LDRH     r2,[r0,#0x20]
000004  f0220210          BIC      r2,r2,#0x10
000008  8402              STRH     r2,[r0,#0x20]
;;;373      
;;;374      /* Get the TIMx CCER register value */  
;;;375      tmpccer = TIMx->CCER;
00000a  8c02              LDRH     r2,[r0,#0x20]
;;;376      /* Get the TIMx CR2 register value */
;;;377      tmpcr2 =  TIMx->CR2;
00000c  8883              LDRH     r3,[r0,#4]
;;;378      
;;;379      /* Get the TIMx CCMR1 register value */
;;;380      tmpccmrx = TIMx->CCMR1;
00000e  8b04              LDRH     r4,[r0,#0x18]
;;;381        
;;;382      /* Reset the Output Compare mode and Capture/Compare selection Bits */
;;;383      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
;;;384      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
;;;385      
;;;386      /* Select the Output Compare Mode */
;;;387      tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
000010  880d              LDRH     r5,[r1,#0]
000012  f42446e6          BIC      r6,r4,#0x7300         ;384
000016  f64f74ff          MOV      r4,#0xffff
00001a  ea042505          AND      r5,r4,r5,LSL #8
00001e  4335              ORRS     r5,r5,r6
;;;388      
;;;389      /* Reset the Output Polarity level */
;;;390      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
;;;391      /* Set the Output Compare Polarity */
;;;392      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
000020  890e              LDRH     r6,[r1,#8]
000022  f0220220          BIC      r2,r2,#0x20           ;390
000026  ea041606          AND      r6,r4,r6,LSL #4
00002a  4316              ORRS     r6,r6,r2
;;;393      
;;;394      /* Set the Output State */
;;;395      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
00002c  884a              LDRH     r2,[r1,#2]
00002e  ea041202          AND      r2,r4,r2,LSL #4
000032  4332              ORRS     r2,r2,r6
;;;396        
;;;397      if((TIMx == TIM1) || (TIMx == TIM8))
000034  f1a04680          SUB      r6,r0,#0x40000000
000038  f5b63696          SUBS     r6,r6,#0x12c00
00003c  d004              BEQ      |L49.72|
00003e  f1a04680          SUB      r6,r0,#0x40000000
000042  f5b6369a          SUBS     r6,r6,#0x13400
000046  d115              BNE      |L49.116|
                  |L49.72|
;;;398      {
;;;399        assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
;;;400        assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
;;;401        assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
;;;402        assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
;;;403        
;;;404        /* Reset the Output N Polarity level */
;;;405        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
000048  f0220680          BIC      r6,r2,#0x80
;;;406        /* Set the Output N Polarity */
;;;407        tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
00004c  894a              LDRH     r2,[r1,#0xa]
;;;408        
;;;409        /* Reset the Output N State */
;;;410        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
;;;411        /* Set the Output N State */
;;;412        tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
;;;413        
;;;414        /* Reset the Output Compare and Output Compare N IDLE State */
;;;415        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
;;;416        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
00004e  f4236340          BIC      r3,r3,#0xc00
000052  ea041202          AND      r2,r4,r2,LSL #4       ;407
000056  4332              ORRS     r2,r2,r6              ;407
000058  f0220640          BIC      r6,r2,#0x40           ;410
00005c  888a              LDRH     r2,[r1,#4]            ;412
00005e  ea041202          AND      r2,r4,r2,LSL #4       ;412
000062  4332              ORRS     r2,r2,r6              ;412
;;;417        
;;;418        /* Set the Output Idle state */
;;;419        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
000064  898e              LDRH     r6,[r1,#0xc]
000066  ea040686          AND      r6,r4,r6,LSL #2
00006a  431e              ORRS     r6,r6,r3
;;;420        /* Set the Output N Idle state */
;;;421        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
00006c  89cb              LDRH     r3,[r1,#0xe]
00006e  ea040383          AND      r3,r4,r3,LSL #2
000072  4333              ORRS     r3,r3,r6
                  |L49.116|
;;;422      }
;;;423      /* Write to TIMx CR2 */
;;;424      TIMx->CR2 = tmpcr2;
000074  8083              STRH     r3,[r0,#4]
;;;425      
;;;426      /* Write to TIMx CCMR1 */
;;;427      TIMx->CCMR1 = tmpccmrx;
000076  8305              STRH     r5,[r0,#0x18]
;;;428    
;;;429      /* Set the Capture Compare Register value */
;;;430      TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
000078  88c9              LDRH     r1,[r1,#6]
00007a  8701              STRH     r1,[r0,#0x38]
;;;431      
;;;432      /* Write to TIMx CCER */
;;;433      TIMx->CCER = tmpccer;
00007c  8402              STRH     r2,[r0,#0x20]
;;;434    }
00007e  bd70              POP      {r4-r6,pc}
;;;435    
                          ENDP


                          AREA ||i.TIM_OC2NPolarityConfig||, CODE, EXECONLY, ALIGN=1

                  TIM_OC2NPolarityConfig PROC
;;;1874     */
;;;1875   void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
000000  8c02              LDRH     r2,[r0,#0x20]
;;;1876   {
;;;1877     uint16_t tmpccer = 0;
;;;1878     /* Check the parameters */
;;;1879     assert_param(IS_TIM_LIST1_PERIPH(TIMx));
;;;1880     assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
;;;1881     
;;;1882     tmpccer = TIMx->CCER;
;;;1883     /* Set or Reset the CC2NP Bit */
;;;1884     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
;;;1885     tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
000002  f64f73ff          MOV      r3,#0xffff
000006  f0220280          BIC      r2,r2,#0x80           ;1884
00000a  ea031101          AND      r1,r3,r1,LSL #4
00000e  4311              ORRS     r1,r1,r2
;;;1886     /* Write to TIMx CCER register */
;;;1887     TIMx->CCER = tmpccer;
000010  8401              STRH     r1,[r0,#0x20]
;;;1888   }
000012  4770              BX       lr
;;;1889   
                          ENDP


                          AREA ||i.TIM_OC2PolarityConfig||, CODE, EXECONLY, ALIGN=1

                  TIM_OC2PolarityConfig PROC
;;;1851     */
;;;1852   void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
000000  8c02              LDRH     r2,[r0,#0x20]
;;;1853   {
;;;1854     uint16_t tmpccer = 0;
;;;1855     /* Check the parameters */
;;;1856     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;1857     assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
;;;1858     tmpccer = TIMx->CCER;
;;;1859     /* Set or Reset the CC2P Bit */
;;;1860     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
;;;1861     tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
000002  f64f73ff          MOV      r3,#0xffff
000006  f0220220          BIC      r2,r2,#0x20           ;1860
00000a  ea031101          AND      r1,r3,r1,LSL #4
00000e  4311              ORRS     r1,r1,r2
;;;1862     /* Write to TIMx CCER register */
;;;1863     TIMx->CCER = tmpccer;
000010  8401              STRH     r1,[r0,#0x20]
;;;1864   }
000012  4770              BX       lr
;;;1865   
                          ENDP


                          AREA ||i.TIM_OC2PreloadConfig||, CODE, EXECONLY, ALIGN=1

                  TIM_OC2PreloadConfig PROC
;;;1533     */
;;;1534   void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;1535   {
;;;1536     uint16_t tmpccmr1 = 0;
;;;1537     /* Check the parameters */
;;;1538     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;1539     assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
;;;1540     tmpccmr1 = TIMx->CCMR1;
;;;1541     /* Reset the OC2PE Bit */
;;;1542     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
;;;1543     /* Enable or Disable the Output Compare Preload feature */
;;;1544     tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
000002  f64f73ff          MOV      r3,#0xffff
000006  f4226200          BIC      r2,r2,#0x800          ;1542
00000a  ea032101          AND      r1,r3,r1,LSL #8
00000e  4311              ORRS     r1,r1,r2
;;;1545     /* Write to TIMx CCMR1 register */
;;;1546     TIMx->CCMR1 = tmpccmr1;
000010  8301              STRH     r1,[r0,#0x18]
;;;1547   }
000012  4770              BX       lr
;;;1548   
                          ENDP


                          AREA ||i.TIM_OC3FastConfig||, CODE, EXECONLY, ALIGN=1

                  TIM_OC3FastConfig PROC
;;;1656     */
;;;1657   void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
000000  8b82              LDRH     r2,[r0,#0x1c]
;;;1658   {
;;;1659     uint16_t tmpccmr2 = 0;
;;;1660     /* Check the parameters */
;;;1661     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1662     assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
;;;1663     /* Get the TIMx CCMR2 register value */
;;;1664     tmpccmr2 = TIMx->CCMR2;
;;;1665     /* Reset the OC3FE Bit */
;;;1666     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
000002  f0220204          BIC      r2,r2,#4
;;;1667     /* Enable or Disable the Output Compare Fast Bit */
;;;1668     tmpccmr2 |= TIM_OCFast;
000006  430a              ORRS     r2,r2,r1
;;;1669     /* Write to TIMx CCMR2 */
;;;1670     TIMx->CCMR2 = tmpccmr2;
000008  8382              STRH     r2,[r0,#0x1c]
;;;1671   }
00000a  4770              BX       lr
;;;1672   
                          ENDP


                          AREA ||i.TIM_OC3Init||, CODE, EXECONLY, ALIGN=1

                  TIM_OC3Init PROC
;;;443      */
;;;444    void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;445    {
;;;446      uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
;;;447       
;;;448      /* Check the parameters */
;;;449      assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
;;;450      assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
;;;451      assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
;;;452      assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
;;;453      /* Disable the Channel 2: Reset the CC2E Bit */
;;;454      TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
000002  8c02              LDRH     r2,[r0,#0x20]
000004  f4227280          BIC      r2,r2,#0x100
000008  8402              STRH     r2,[r0,#0x20]
;;;455      
;;;456      /* Get the TIMx CCER register value */
;;;457      tmpccer = TIMx->CCER;
00000a  8c02              LDRH     r2,[r0,#0x20]
;;;458      /* Get the TIMx CR2 register value */
;;;459      tmpcr2 =  TIMx->CR2;
00000c  8883              LDRH     r3,[r0,#4]
;;;460      
;;;461      /* Get the TIMx CCMR2 register value */
;;;462      tmpccmrx = TIMx->CCMR2;
00000e  8b84              LDRH     r4,[r0,#0x1c]
;;;463        
;;;464      /* Reset the Output Compare mode and Capture/Compare selection Bits */
;;;465      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
;;;466      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
;;;467      /* Select the Output Compare Mode */
;;;468      tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
000010  880d              LDRH     r5,[r1,#0]
000012  f0240473          BIC      r4,r4,#0x73           ;466
000016  4325              ORRS     r5,r5,r4
;;;469      
;;;470      /* Reset the Output Polarity level */
;;;471      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
;;;472      /* Set the Output Compare Polarity */
;;;473      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
000018  890e              LDRH     r6,[r1,#8]
00001a  f64f74ff          MOV      r4,#0xffff
00001e  f4227200          BIC      r2,r2,#0x200          ;471
000022  ea042606          AND      r6,r4,r6,LSL #8
000026  4316              ORRS     r6,r6,r2
;;;474      
;;;475      /* Set the Output State */
;;;476      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
000028  884a              LDRH     r2,[r1,#2]
00002a  ea042202          AND      r2,r4,r2,LSL #8
00002e  4332              ORRS     r2,r2,r6
;;;477        
;;;478      if((TIMx == TIM1) || (TIMx == TIM8))
000030  f1a04680          SUB      r6,r0,#0x40000000
000034  f5b63696          SUBS     r6,r6,#0x12c00
000038  d004              BEQ      |L54.68|
00003a  f1a04680          SUB      r6,r0,#0x40000000
00003e  f5b6369a          SUBS     r6,r6,#0x13400
000042  d115              BNE      |L54.112|
                  |L54.68|
;;;479      {
;;;480        assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
;;;481        assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
;;;482        assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
;;;483        assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
;;;484        
;;;485        /* Reset the Output N Polarity level */
;;;486        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
000044  f4226600          BIC      r6,r2,#0x800
;;;487        /* Set the Output N Polarity */
;;;488        tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
000048  894a              LDRH     r2,[r1,#0xa]
;;;489        /* Reset the Output N State */
;;;490        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
;;;491        
;;;492        /* Set the Output N State */
;;;493        tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
;;;494        /* Reset the Output Compare and Output Compare N IDLE State */
;;;495        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
;;;496        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
00004a  f4235340          BIC      r3,r3,#0x3000
00004e  ea042202          AND      r2,r4,r2,LSL #8       ;488
000052  4332              ORRS     r2,r2,r6              ;488
000054  f4226680          BIC      r6,r2,#0x400          ;490
000058  888a              LDRH     r2,[r1,#4]            ;493
00005a  ea042202          AND      r2,r4,r2,LSL #8       ;493
00005e  4332              ORRS     r2,r2,r6              ;493
;;;497        /* Set the Output Idle state */
;;;498        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
000060  898e              LDRH     r6,[r1,#0xc]
000062  ea041606          AND      r6,r4,r6,LSL #4
000066  431e              ORRS     r6,r6,r3
;;;499        /* Set the Output N Idle state */
;;;500        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
000068  89cb              LDRH     r3,[r1,#0xe]
00006a  ea041303          AND      r3,r4,r3,LSL #4
00006e  4333              ORRS     r3,r3,r6
                  |L54.112|
;;;501      }
;;;502      /* Write to TIMx CR2 */
;;;503      TIMx->CR2 = tmpcr2;
000070  8083              STRH     r3,[r0,#4]
;;;504      
;;;505      /* Write to TIMx CCMR2 */
;;;506      TIMx->CCMR2 = tmpccmrx;
000072  8385              STRH     r5,[r0,#0x1c]
;;;507    
;;;508      /* Set the Capture Compare Register value */
;;;509      TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
000074  88c9              LDRH     r1,[r1,#6]
000076  8781              STRH     r1,[r0,#0x3c]
;;;510      
;;;511      /* Write to TIMx CCER */
;;;512      TIMx->CCER = tmpccer;
000078  8402              STRH     r2,[r0,#0x20]
;;;513    }
00007a  bd70              POP      {r4-r6,pc}
;;;514    
                          ENDP


                          AREA ||i.TIM_OC3NPolarityConfig||, CODE, EXECONLY, ALIGN=1

                  TIM_OC3NPolarityConfig PROC
;;;1921     */
;;;1922   void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
000000  8c02              LDRH     r2,[r0,#0x20]
;;;1923   {
;;;1924     uint16_t tmpccer = 0;
;;;1925    
;;;1926     /* Check the parameters */
;;;1927     assert_param(IS_TIM_LIST1_PERIPH(TIMx));
;;;1928     assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
;;;1929       
;;;1930     tmpccer = TIMx->CCER;
;;;1931     /* Set or Reset the CC3NP Bit */
;;;1932     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
;;;1933     tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
000002  f64f73ff          MOV      r3,#0xffff
000006  f4226200          BIC      r2,r2,#0x800          ;1932
00000a  ea032101          AND      r1,r3,r1,LSL #8
00000e  4311              ORRS     r1,r1,r2
;;;1934     /* Write to TIMx CCER register */
;;;1935     TIMx->CCER = tmpccer;
000010  8401              STRH     r1,[r0,#0x20]
;;;1936   }
000012  4770              BX       lr
;;;1937   
                          ENDP


                          AREA ||i.TIM_OC3PolarityConfig||, CODE, EXECONLY, ALIGN=1

                  TIM_OC3PolarityConfig PROC
;;;1898     */
;;;1899   void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
000000  8c02              LDRH     r2,[r0,#0x20]
;;;1900   {
;;;1901     uint16_t tmpccer = 0;
;;;1902     /* Check the parameters */
;;;1903     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1904     assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
;;;1905     tmpccer = TIMx->CCER;
;;;1906     /* Set or Reset the CC3P Bit */
;;;1907     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
;;;1908     tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
000002  f64f73ff          MOV      r3,#0xffff
000006  f4227200          BIC      r2,r2,#0x200          ;1907
00000a  ea032101          AND      r1,r3,r1,LSL #8
00000e  4311              ORRS     r1,r1,r2
;;;1909     /* Write to TIMx CCER register */
;;;1910     TIMx->CCER = tmpccer;
000010  8401              STRH     r1,[r0,#0x20]
;;;1911   }
000012  4770              BX       lr
;;;1912   
                          ENDP


                          AREA ||i.TIM_OC3PreloadConfig||, CODE, EXECONLY, ALIGN=1

                  TIM_OC3PreloadConfig PROC
;;;1557     */
;;;1558   void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
000000  8b82              LDRH     r2,[r0,#0x1c]
;;;1559   {
;;;1560     uint16_t tmpccmr2 = 0;
;;;1561     /* Check the parameters */
;;;1562     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1563     assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
;;;1564     tmpccmr2 = TIMx->CCMR2;
;;;1565     /* Reset the OC3PE Bit */
;;;1566     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
000002  f0220208          BIC      r2,r2,#8
;;;1567     /* Enable or Disable the Output Compare Preload feature */
;;;1568     tmpccmr2 |= TIM_OCPreload;
000006  430a              ORRS     r2,r2,r1
;;;1569     /* Write to TIMx CCMR2 register */
;;;1570     TIMx->CCMR2 = tmpccmr2;
000008  8382              STRH     r2,[r0,#0x1c]
;;;1571   }
00000a  4770              BX       lr
;;;1572   
                          ENDP


                          AREA ||i.TIM_OC4FastConfig||, CODE, EXECONLY, ALIGN=1

                  TIM_OC4FastConfig PROC
;;;1681     */
;;;1682   void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
000000  8b82              LDRH     r2,[r0,#0x1c]
;;;1683   {
;;;1684     uint16_t tmpccmr2 = 0;
;;;1685     /* Check the parameters */
;;;1686     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1687     assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
;;;1688     /* Get the TIMx CCMR2 register value */
;;;1689     tmpccmr2 = TIMx->CCMR2;
;;;1690     /* Reset the OC4FE Bit */
;;;1691     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
;;;1692     /* Enable or Disable the Output Compare Fast Bit */
;;;1693     tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
000002  f64f73ff          MOV      r3,#0xffff
000006  f4226280          BIC      r2,r2,#0x400          ;1691
00000a  ea032101          AND      r1,r3,r1,LSL #8
00000e  4311              ORRS     r1,r1,r2
;;;1694     /* Write to TIMx CCMR2 */
;;;1695     TIMx->CCMR2 = tmpccmr2;
000010  8381              STRH     r1,[r0,#0x1c]
;;;1696   }
000012  4770              BX       lr
;;;1697   
                          ENDP


                          AREA ||i.TIM_OC4Init||, CODE, EXECONLY, ALIGN=1

                  TIM_OC4Init PROC
;;;522      */
;;;523    void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;524    {
;;;525      uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
;;;526       
;;;527      /* Check the parameters */
;;;528      assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
;;;529      assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
;;;530      assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
;;;531      assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
;;;532      /* Disable the Channel 2: Reset the CC4E Bit */
;;;533      TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
000002  8c02              LDRH     r2,[r0,#0x20]
000004  f4225280          BIC      r2,r2,#0x1000
000008  8402              STRH     r2,[r0,#0x20]
;;;534      
;;;535      /* Get the TIMx CCER register value */
;;;536      tmpccer = TIMx->CCER;
00000a  8c05              LDRH     r5,[r0,#0x20]
;;;537      /* Get the TIMx CR2 register value */
;;;538      tmpcr2 =  TIMx->CR2;
00000c  8882              LDRH     r2,[r0,#4]
;;;539      
;;;540      /* Get the TIMx CCMR2 register value */
;;;541      tmpccmrx = TIMx->CCMR2;
00000e  8b83              LDRH     r3,[r0,#0x1c]
;;;542        
;;;543      /* Reset the Output Compare mode and Capture/Compare selection Bits */
;;;544      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
;;;545      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
;;;546      
;;;547      /* Select the Output Compare Mode */
;;;548      tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
000010  880c              LDRH     r4,[r1,#0]
000012  f42346e6          BIC      r6,r3,#0x7300         ;545
000016  f64f73ff          MOV      r3,#0xffff
00001a  ea032404          AND      r4,r3,r4,LSL #8
00001e  4334              ORRS     r4,r4,r6
;;;549      
;;;550      /* Reset the Output Polarity level */
;;;551      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
000020  f4255600          BIC      r6,r5,#0x2000
;;;552      /* Set the Output Compare Polarity */
;;;553      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
000024  890d              LDRH     r5,[r1,#8]
000026  ea033505          AND      r5,r3,r5,LSL #12
00002a  4335              ORRS     r5,r5,r6
;;;554      
;;;555      /* Set the Output State */
;;;556      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
00002c  884e              LDRH     r6,[r1,#2]
00002e  ea033606          AND      r6,r3,r6,LSL #12
000032  432e              ORRS     r6,r6,r5
;;;557        
;;;558      if((TIMx == TIM1) || (TIMx == TIM8))
000034  f1a04580          SUB      r5,r0,#0x40000000
000038  f5b53596          SUBS     r5,r5,#0x12c00
00003c  d004              BEQ      |L59.72|
00003e  f1a04580          SUB      r5,r0,#0x40000000
000042  f5b5359a          SUBS     r5,r5,#0x13400
000046  d105              BNE      |L59.84|
                  |L59.72|
;;;559      {
;;;560        assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
;;;561        /* Reset the Output Compare IDLE State */
;;;562        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
000048  f4224580          BIC      r5,r2,#0x4000
;;;563        /* Set the Output Idle state */
;;;564        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
00004c  898a              LDRH     r2,[r1,#0xc]
00004e  ea031282          AND      r2,r3,r2,LSL #6
000052  432a              ORRS     r2,r2,r5
                  |L59.84|
;;;565      }
;;;566      /* Write to TIMx CR2 */
;;;567      TIMx->CR2 = tmpcr2;
000054  8082              STRH     r2,[r0,#4]
;;;568      
;;;569      /* Write to TIMx CCMR2 */  
;;;570      TIMx->CCMR2 = tmpccmrx;
000056  8384              STRH     r4,[r0,#0x1c]
;;;571    
;;;572      /* Set the Capture Compare Register value */
;;;573      TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
000058  88c9              LDRH     r1,[r1,#6]
00005a  f8a01040          STRH     r1,[r0,#0x40]
;;;574      
;;;575      /* Write to TIMx CCER */
;;;576      TIMx->CCER = tmpccer;
00005e  8406              STRH     r6,[r0,#0x20]
;;;577    }
000060  bd70              POP      {r4-r6,pc}
;;;578    
                          ENDP


                          AREA ||i.TIM_OC4PolarityConfig||, CODE, EXECONLY, ALIGN=1

                  TIM_OC4PolarityConfig PROC
;;;1946     */
;;;1947   void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
000000  8c02              LDRH     r2,[r0,#0x20]
;;;1948   {
;;;1949     uint16_t tmpccer = 0;
;;;1950     /* Check the parameters */
;;;1951     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1952     assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
;;;1953     tmpccer = TIMx->CCER;
;;;1954     /* Set or Reset the CC4P Bit */
;;;1955     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
;;;1956     tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
000002  f64f73ff          MOV      r3,#0xffff
000006  f4225200          BIC      r2,r2,#0x2000         ;1955
00000a  ea033101          AND      r1,r3,r1,LSL #12
00000e  4311              ORRS     r1,r1,r2
;;;1957     /* Write to TIMx CCER register */
;;;1958     TIMx->CCER = tmpccer;
000010  8401              STRH     r1,[r0,#0x20]
;;;1959   }
000012  4770              BX       lr
;;;1960   
                          ENDP


                          AREA ||i.TIM_OC4PreloadConfig||, CODE, EXECONLY, ALIGN=1

                  TIM_OC4PreloadConfig PROC
;;;1581     */
;;;1582   void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
000000  8b82              LDRH     r2,[r0,#0x1c]
;;;1583   {
;;;1584     uint16_t tmpccmr2 = 0;
;;;1585     /* Check the parameters */
;;;1586     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1587     assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
;;;1588     tmpccmr2 = TIMx->CCMR2;
;;;1589     /* Reset the OC4PE Bit */
;;;1590     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
;;;1591     /* Enable or Disable the Output Compare Preload feature */
;;;1592     tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
000002  f64f73ff          MOV      r3,#0xffff
000006  f4226200          BIC      r2,r2,#0x800          ;1590
00000a  ea032101          AND      r1,r3,r1,LSL #8
00000e  4311              ORRS     r1,r1,r2
;;;1593     /* Write to TIMx CCMR2 register */
;;;1594     TIMx->CCMR2 = tmpccmr2;
000010  8381              STRH     r1,[r0,#0x1c]
;;;1595   }
000012  4770              BX       lr
;;;1596   
                          ENDP


                          AREA ||i.TIM_OCStructInit||, CODE, EXECONLY, ALIGN=1

                  TIM_OCStructInit PROC
;;;751      */
;;;752    void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
000000  2100              MOVS     r1,#0
;;;753    {
;;;754      /* Set the default configuration */
;;;755      TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
000002  8001              STRH     r1,[r0,#0]
;;;756      TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
000004  8041              STRH     r1,[r0,#2]
;;;757      TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
000006  8081              STRH     r1,[r0,#4]
;;;758      TIM_OCInitStruct->TIM_Pulse = 0x0000;
000008  80c1              STRH     r1,[r0,#6]
;;;759      TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
00000a  8101              STRH     r1,[r0,#8]
;;;760      TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
00000c  8141              STRH     r1,[r0,#0xa]
;;;761      TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
00000e  8181              STRH     r1,[r0,#0xc]
;;;762      TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
000010  81c1              STRH     r1,[r0,#0xe]
;;;763    }
000012  4770              BX       lr
;;;764    
                          ENDP


                          AREA ||i.TIM_PWMIConfig||, CODE, EXECONLY, ALIGN=1

                  TIM_PWMIConfig PROC
;;;653      */
;;;654    void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;655    {
000004  460c              MOV      r4,r1
;;;656      uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
000006  2600              MOVS     r6,#0
;;;657      uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
;;;658      /* Check the parameters */
;;;659      assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;660      /* Select the Opposite Input Polarity */
;;;661      if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
000008  8849              LDRH     r1,[r1,#2]
00000a  4607              MOV      r7,r0                 ;655
00000c  2501              MOVS     r5,#1                 ;657
00000e  b901              CBNZ     r1,|L63.18|
;;;662      {
;;;663        icoppositepolarity = TIM_ICPolarity_Falling;
000010  2602              MOVS     r6,#2
                  |L63.18|
;;;664      }
;;;665      else
;;;666      {
;;;667        icoppositepolarity = TIM_ICPolarity_Rising;
;;;668      }
;;;669      /* Select the Opposite Input */
;;;670      if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
000012  88a2              LDRH     r2,[r4,#4]
000014  2a01              CMP      r2,#1
000016  d100              BNE      |L63.26|
;;;671      {
;;;672        icoppositeselection = TIM_ICSelection_IndirectTI;
000018  2502              MOVS     r5,#2
                  |L63.26|
;;;673      }
;;;674      else
;;;675      {
;;;676        icoppositeselection = TIM_ICSelection_DirectTI;
;;;677      }
;;;678      if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
00001a  8820              LDRH     r0,[r4,#0]
;;;679      {
;;;680        /* TI1 Configuration */
;;;681        TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
00001c  8923              LDRH     r3,[r4,#8]
00001e  2800              CMP      r0,#0                 ;678
;;;682                   TIM_ICInitStruct->TIM_ICFilter);
;;;683        /* Set the Input Capture Prescaler value */
;;;684        TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
;;;685        /* TI2 Configuration */
;;;686        TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
;;;687        /* Set the Input Capture Prescaler value */
;;;688        TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
;;;689      }
;;;690      else
;;;691      { 
;;;692        /* TI2 Configuration */
;;;693        TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
000020  4638              MOV      r0,r7
000022  d011              BEQ      |L63.72|
000024  f7fffffe          BL       TI2_Config
;;;694                   TIM_ICInitStruct->TIM_ICFilter);
;;;695        /* Set the Input Capture Prescaler value */
;;;696        TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
000028  88e1              LDRH     r1,[r4,#6]
00002a  4638              MOV      r0,r7
00002c  f7fffffe          BL       TIM_SetIC2Prescaler
;;;697        /* TI1 Configuration */
;;;698        TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
000030  8923              LDRH     r3,[r4,#8]
000032  462a              MOV      r2,r5
000034  4631              MOV      r1,r6
000036  4638              MOV      r0,r7
000038  f7fffffe          BL       TI1_Config
;;;699        /* Set the Input Capture Prescaler value */
;;;700        TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
00003c  88e1              LDRH     r1,[r4,#6]
00003e  4638              MOV      r0,r7
000040  e8bd41f0          POP      {r4-r8,lr}
000044  f7ffbffe          B.W      TIM_SetIC1Prescaler
                  |L63.72|
000048  f7fffffe          BL       TI1_Config
00004c  88e1              LDRH     r1,[r4,#6]            ;684
00004e  4638              MOV      r0,r7                 ;684
000050  f7fffffe          BL       TIM_SetIC1Prescaler
000054  8923              LDRH     r3,[r4,#8]            ;686
000056  462a              MOV      r2,r5                 ;686
000058  4631              MOV      r1,r6                 ;686
00005a  4638              MOV      r0,r7                 ;686
00005c  f7fffffe          BL       TI2_Config
000060  88e1              LDRH     r1,[r4,#6]            ;688
000062  4638              MOV      r0,r7                 ;688
000064  e8bd41f0          POP      {r4-r8,lr}            ;688
000068  f7ffbffe          B.W      TIM_SetIC2Prescaler
;;;701      }
;;;702    }
;;;703    
                          ENDP


                          AREA ||i.TIM_PrescalerConfig||, CODE, EXECONLY, ALIGN=1

                  TIM_PrescalerConfig PROC
;;;1175     */
;;;1176   void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
000000  8501              STRH     r1,[r0,#0x28]
;;;1177   {
;;;1178     /* Check the parameters */
;;;1179     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;1180     assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
;;;1181     /* Set the Prescaler value */
;;;1182     TIMx->PSC = Prescaler;
;;;1183     /* Set or reset the UG Bit */
;;;1184     TIMx->EGR = TIM_PSCReloadMode;
000002  8282              STRH     r2,[r0,#0x14]
;;;1185   }
000004  4770              BX       lr
;;;1186   
                          ENDP


                          AREA ||i.TIM_SelectCCDMA||, CODE, EXECONLY, ALIGN=1

                  TIM_SelectCCDMA PROC
;;;1457     */
;;;1458   void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;1459   {
;;;1460     /* Check the parameters */
;;;1461     assert_param(IS_TIM_LIST4_PERIPH(TIMx));
;;;1462     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1463     if (NewState != DISABLE)
;;;1464     {
;;;1465       /* Set the CCDS Bit */
;;;1466       TIMx->CR2 |= TIM_CR2_CCDS;
;;;1467     }
;;;1468     else
;;;1469     {
;;;1470       /* Reset the CCDS Bit */
;;;1471       TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
000002  8881              LDRH     r1,[r0,#4]
000004  d002              BEQ      |L65.12|
000006  f0410108          ORR      r1,r1,#8              ;1466
00000a  e001              B        |L65.16|
                  |L65.12|
00000c  f0210108          BIC      r1,r1,#8
                  |L65.16|
000010  8081              STRH     r1,[r0,#4]            ;1466
;;;1472     }
;;;1473   }
000012  4770              BX       lr
;;;1474   
                          ENDP


                          AREA ||i.TIM_SelectCOM||, CODE, EXECONLY, ALIGN=1

                  TIM_SelectCOM PROC
;;;1432     */
;;;1433   void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;1434   {
;;;1435     /* Check the parameters */
;;;1436     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
;;;1437     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1438     if (NewState != DISABLE)
;;;1439     {
;;;1440       /* Set the COM Bit */
;;;1441       TIMx->CR2 |= TIM_CR2_CCUS;
;;;1442     }
;;;1443     else
;;;1444     {
;;;1445       /* Reset the COM Bit */
;;;1446       TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
000002  8881              LDRH     r1,[r0,#4]
000004  d002              BEQ      |L66.12|
000006  f0410104          ORR      r1,r1,#4              ;1441
00000a  e001              B        |L66.16|
                  |L66.12|
00000c  f0210104          BIC      r1,r1,#4
                  |L66.16|
000010  8081              STRH     r1,[r0,#4]            ;1441
;;;1447     }
;;;1448   }
000012  4770              BX       lr
;;;1449   
                          ENDP


                          AREA ||i.TIM_SelectHallSensor||, CODE, EXECONLY, ALIGN=1

                  TIM_SelectHallSensor PROC
;;;2143     */
;;;2144   void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;2145   {
;;;2146     /* Check the parameters */
;;;2147     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;2148     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;2149     if (NewState != DISABLE)
;;;2150     {
;;;2151       /* Set the TI1S Bit */
;;;2152       TIMx->CR2 |= TIM_CR2_TI1S;
;;;2153     }
;;;2154     else
;;;2155     {
;;;2156       /* Reset the TI1S Bit */
;;;2157       TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
000002  8881              LDRH     r1,[r0,#4]
000004  d002              BEQ      |L67.12|
000006  f0410180          ORR      r1,r1,#0x80           ;2152
00000a  e001              B        |L67.16|
                  |L67.12|
00000c  f0210180          BIC      r1,r1,#0x80
                  |L67.16|
000010  8081              STRH     r1,[r0,#4]            ;2152
;;;2158     }
;;;2159   }
000012  4770              BX       lr
;;;2160   
                          ENDP


                          AREA ||i.TIM_SelectInputTrigger||, CODE, EXECONLY, ALIGN=1

                  TIM_SelectInputTrigger PROC
;;;1228     */
;;;1229   void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
000000  8902              LDRH     r2,[r0,#8]
;;;1230   {
;;;1231     uint16_t tmpsmcr = 0;
;;;1232     /* Check the parameters */
;;;1233     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;1234     assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
;;;1235     /* Get the TIMx SMCR register value */
;;;1236     tmpsmcr = TIMx->SMCR;
;;;1237     /* Reset the TS Bits */
;;;1238     tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
000002  f0220270          BIC      r2,r2,#0x70
;;;1239     /* Set the Input Trigger source */
;;;1240     tmpsmcr |= TIM_InputTriggerSource;
000006  430a              ORRS     r2,r2,r1
;;;1241     /* Write to TIMx SMCR */
;;;1242     TIMx->SMCR = tmpsmcr;
000008  8102              STRH     r2,[r0,#8]
;;;1243   }
00000a  4770              BX       lr
;;;1244   
                          ENDP


                          AREA ||i.TIM_SelectMasterSlaveMode||, CODE, EXECONLY, ALIGN=1

                  TIM_SelectMasterSlaveMode PROC
;;;2245     */
;;;2246   void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
000000  8902              LDRH     r2,[r0,#8]
;;;2247   {
;;;2248     /* Check the parameters */
;;;2249     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;2250     assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
;;;2251     /* Reset the MSM Bit */
;;;2252     TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
000002  f0220280          BIC      r2,r2,#0x80
000006  8102              STRH     r2,[r0,#8]
;;;2253     
;;;2254     /* Set or Reset the MSM Bit */
;;;2255     TIMx->SMCR |= TIM_MasterSlaveMode;
000008  8902              LDRH     r2,[r0,#8]
00000a  430a              ORRS     r2,r2,r1
00000c  8102              STRH     r2,[r0,#8]
;;;2256   }
00000e  4770              BX       lr
;;;2257   
                          ENDP


                          AREA ||i.TIM_SelectOCxM||, CODE, EXECONLY, ALIGN=1

                  TIM_SelectOCxM PROC
;;;2044     */
;;;2045   void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
000000  b530              PUSH     {r4,r5,lr}
;;;2046   {
;;;2047     uint32_t tmp = 0;
;;;2048     uint16_t tmp1 = 0;
;;;2049   
;;;2050     /* Check the parameters */
;;;2051     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;2052     assert_param(IS_TIM_CHANNEL(TIM_Channel));
;;;2053     assert_param(IS_TIM_OCM(TIM_OCMode));
;;;2054   
;;;2055     tmp = (uint32_t) TIMx;
;;;2056     tmp += CCMR_Offset;
;;;2057   
;;;2058     tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
000002  2401              MOVS     r4,#1
;;;2059   
;;;2060     /* Disable the Channel: Reset the CCxE Bit */
;;;2061     TIMx->CCER &= (uint16_t) ~tmp1;
000004  8c05              LDRH     r5,[r0,#0x20]
000006  f1000318          ADD      r3,r0,#0x18           ;2056
00000a  408c              LSLS     r4,r4,r1              ;2058
00000c  43a5              BICS     r5,r5,r4
00000e  8405              STRH     r5,[r0,#0x20]
000010  b189              CBZ      r1,|L70.54|
;;;2062   
;;;2063     if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
000012  2908              CMP      r1,#8
000014  d00f              BEQ      |L70.54|
000016  1f09              SUBS     r1,r1,#4
;;;2064     {
;;;2065       tmp += (TIM_Channel>>1);
;;;2066   
;;;2067       /* Reset the OCxM bits in the CCMRx register */
;;;2068       *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
;;;2069      
;;;2070       /* Configure the OCxM bits in the CCMRx register */
;;;2071       *(__IO uint32_t *) tmp |= TIM_OCMode;
;;;2072     }
;;;2073     else
;;;2074     {
;;;2075       tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
000018  f3c1004e          UBFX     r0,r1,#1,#15
00001c  4418              ADD      r0,r0,r3
;;;2076   
;;;2077       /* Reset the OCxM bits in the CCMRx register */
;;;2078       *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
00001e  6801              LDR      r1,[r0,#0]
000020  f42141e0          BIC      r1,r1,#0x7000
000024  6001              STR      r1,[r0,#0]
;;;2079       
;;;2080       /* Configure the OCxM bits in the CCMRx register */
;;;2081       *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
000026  6801              LDR      r1,[r0,#0]
000028  f64f73ff          MOV      r3,#0xffff
00002c  ea032202          AND      r2,r3,r2,LSL #8
                  |L70.48|
000030  4311              ORRS     r1,r1,r2              ;2071
000032  6001              STR      r1,[r0,#0]            ;2071
;;;2082     }
;;;2083   }
000034  bd30              POP      {r4,r5,pc}
                  |L70.54|
000036  eb030051          ADD      r0,r3,r1,LSR #1       ;2065
00003a  6801              LDR      r1,[r0,#0]            ;2068
00003c  f0210170          BIC      r1,r1,#0x70           ;2068
000040  6001              STR      r1,[r0,#0]            ;2068
000042  6801              LDR      r1,[r0,#0]            ;2071
000044  e7f4              B        |L70.48|
;;;2084   
                          ENDP


                          AREA ||i.TIM_SelectOnePulseMode||, CODE, EXECONLY, ALIGN=1

                  TIM_SelectOnePulseMode PROC
;;;2169     */
;;;2170   void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
000000  8802              LDRH     r2,[r0,#0]
;;;2171   {
;;;2172     /* Check the parameters */
;;;2173     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2174     assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
;;;2175     /* Reset the OPM Bit */
;;;2176     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
000002  f0220208          BIC      r2,r2,#8
000006  8002              STRH     r2,[r0,#0]
;;;2177     /* Configure the OPM Mode */
;;;2178     TIMx->CR1 |= TIM_OPMode;
000008  8802              LDRH     r2,[r0,#0]
00000a  430a              ORRS     r2,r2,r1
00000c  8002              STRH     r2,[r0,#0]
;;;2179   }
00000e  4770              BX       lr
;;;2180   
                          ENDP


                          AREA ||i.TIM_SelectOutputTrigger||, CODE, EXECONLY, ALIGN=1

                  TIM_SelectOutputTrigger PROC
;;;2201     */
;;;2202   void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
000000  8882              LDRH     r2,[r0,#4]
;;;2203   {
;;;2204     /* Check the parameters */
;;;2205     assert_param(IS_TIM_LIST7_PERIPH(TIMx));
;;;2206     assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
;;;2207     /* Reset the MMS Bits */
;;;2208     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
000002  f0220270          BIC      r2,r2,#0x70
000006  8082              STRH     r2,[r0,#4]
;;;2209     /* Select the TRGO source */
;;;2210     TIMx->CR2 |=  TIM_TRGOSource;
000008  8882              LDRH     r2,[r0,#4]
00000a  430a              ORRS     r2,r2,r1
00000c  8082              STRH     r2,[r0,#4]
;;;2211   }
00000e  4770              BX       lr
;;;2212   
                          ENDP


                          AREA ||i.TIM_SelectSlaveMode||, CODE, EXECONLY, ALIGN=1

                  TIM_SelectSlaveMode PROC
;;;2224     */
;;;2225   void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
000000  8902              LDRH     r2,[r0,#8]
;;;2226   {
;;;2227     /* Check the parameters */
;;;2228     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;2229     assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
;;;2230    /* Reset the SMS Bits */
;;;2231     TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
000002  f0220207          BIC      r2,r2,#7
000006  8102              STRH     r2,[r0,#8]
;;;2232     /* Select the Slave Mode */
;;;2233     TIMx->SMCR |= TIM_SlaveMode;
000008  8902              LDRH     r2,[r0,#8]
00000a  430a              ORRS     r2,r2,r1
00000c  8102              STRH     r2,[r0,#8]
;;;2234   }
00000e  4770              BX       lr
;;;2235   
                          ENDP


                          AREA ||i.TIM_SetAutoreload||, CODE, EXECONLY, ALIGN=1

                  TIM_SetAutoreload PROC
;;;2277     */
;;;2278   void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
000000  8581              STRH     r1,[r0,#0x2c]
;;;2279   {
;;;2280     /* Check the parameters */
;;;2281     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2282     /* Set the Autoreload Register value */
;;;2283     TIMx->ARR = Autoreload;
;;;2284   }
000002  4770              BX       lr
;;;2285   
                          ENDP


                          AREA ||i.TIM_SetClockDivision||, CODE, EXECONLY, ALIGN=1

                  TIM_SetClockDivision PROC
;;;2440     */
;;;2441   void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
000000  8802              LDRH     r2,[r0,#0]
;;;2442   {
;;;2443     /* Check the parameters */
;;;2444     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;2445     assert_param(IS_TIM_CKD_DIV(TIM_CKD));
;;;2446     /* Reset the CKD Bits */
;;;2447     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
000002  f4227240          BIC      r2,r2,#0x300
000006  8002              STRH     r2,[r0,#0]
;;;2448     /* Set the CKD value */
;;;2449     TIMx->CR1 |= TIM_CKD;
000008  8802              LDRH     r2,[r0,#0]
00000a  430a              ORRS     r2,r2,r1
00000c  8002              STRH     r2,[r0,#0]
;;;2450   }
00000e  4770              BX       lr
;;;2451   
                          ENDP


                          AREA ||i.TIM_SetCompare1||, CODE, EXECONLY, ALIGN=1

                  TIM_SetCompare1 PROC
;;;2291     */
;;;2292   void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
000000  8681              STRH     r1,[r0,#0x34]
;;;2293   {
;;;2294     /* Check the parameters */
;;;2295     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;2296     /* Set the Capture Compare1 Register value */
;;;2297     TIMx->CCR1 = Compare1;
;;;2298   }
000002  4770              BX       lr
;;;2299   
                          ENDP


                          AREA ||i.TIM_SetCompare2||, CODE, EXECONLY, ALIGN=1

                  TIM_SetCompare2 PROC
;;;2305     */
;;;2306   void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
000000  8701              STRH     r1,[r0,#0x38]
;;;2307   {
;;;2308     /* Check the parameters */
;;;2309     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;2310     /* Set the Capture Compare2 Register value */
;;;2311     TIMx->CCR2 = Compare2;
;;;2312   }
000002  4770              BX       lr
;;;2313   
                          ENDP


                          AREA ||i.TIM_SetCompare3||, CODE, EXECONLY, ALIGN=1

                  TIM_SetCompare3 PROC
;;;2319     */
;;;2320   void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
000000  8781              STRH     r1,[r0,#0x3c]
;;;2321   {
;;;2322     /* Check the parameters */
;;;2323     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;2324     /* Set the Capture Compare3 Register value */
;;;2325     TIMx->CCR3 = Compare3;
;;;2326   }
000002  4770              BX       lr
;;;2327   
                          ENDP


                          AREA ||i.TIM_SetCompare4||, CODE, EXECONLY, ALIGN=1

                  TIM_SetCompare4 PROC
;;;2333     */
;;;2334   void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
000000  f8a01040          STRH     r1,[r0,#0x40]
;;;2335   {
;;;2336     /* Check the parameters */
;;;2337     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;2338     /* Set the Capture Compare4 Register value */
;;;2339     TIMx->CCR4 = Compare4;
;;;2340   }
000004  4770              BX       lr
;;;2341   
                          ENDP


                          AREA ||i.TIM_SetCounter||, CODE, EXECONLY, ALIGN=1

                  TIM_SetCounter PROC
;;;2263     */
;;;2264   void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
000000  8481              STRH     r1,[r0,#0x24]
;;;2265   {
;;;2266     /* Check the parameters */
;;;2267     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2268     /* Set the Counter Register value */
;;;2269     TIMx->CNT = Counter;
;;;2270   }
000002  4770              BX       lr
;;;2271   
                          ENDP


                          AREA ||i.TIM_SetIC1Prescaler||, CODE, EXECONLY, ALIGN=1

                  TIM_SetIC1Prescaler PROC
;;;2352     */
;;;2353   void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;2354   {
;;;2355     /* Check the parameters */
;;;2356     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;2357     assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
;;;2358     /* Reset the IC1PSC Bits */
;;;2359     TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
000002  f022020c          BIC      r2,r2,#0xc
000006  8302              STRH     r2,[r0,#0x18]
;;;2360     /* Set the IC1PSC value */
;;;2361     TIMx->CCMR1 |= TIM_ICPSC;
000008  8b02              LDRH     r2,[r0,#0x18]
00000a  430a              ORRS     r2,r2,r1
00000c  8302              STRH     r2,[r0,#0x18]
;;;2362   }
00000e  4770              BX       lr
;;;2363   
                          ENDP


                          AREA ||i.TIM_SetIC2Prescaler||, CODE, EXECONLY, ALIGN=1

                  TIM_SetIC2Prescaler PROC
;;;2374     */
;;;2375   void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;2376   {
;;;2377     /* Check the parameters */
;;;2378     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;2379     assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
;;;2380     /* Reset the IC2PSC Bits */
;;;2381     TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
000002  f4226240          BIC      r2,r2,#0xc00
000006  8302              STRH     r2,[r0,#0x18]
;;;2382     /* Set the IC2PSC value */
;;;2383     TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
000008  8b02              LDRH     r2,[r0,#0x18]
00000a  f64f73ff          MOV      r3,#0xffff
00000e  ea032101          AND      r1,r3,r1,LSL #8
000012  430a              ORRS     r2,r2,r1
000014  8302              STRH     r2,[r0,#0x18]
;;;2384   }
000016  4770              BX       lr
;;;2385   
                          ENDP


                          AREA ||i.TIM_SetIC3Prescaler||, CODE, EXECONLY, ALIGN=1

                  TIM_SetIC3Prescaler PROC
;;;2396     */
;;;2397   void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
000000  8b82              LDRH     r2,[r0,#0x1c]
;;;2398   {
;;;2399     /* Check the parameters */
;;;2400     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;2401     assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
;;;2402     /* Reset the IC3PSC Bits */
;;;2403     TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
000002  f022020c          BIC      r2,r2,#0xc
000006  8382              STRH     r2,[r0,#0x1c]
;;;2404     /* Set the IC3PSC value */
;;;2405     TIMx->CCMR2 |= TIM_ICPSC;
000008  8b82              LDRH     r2,[r0,#0x1c]
00000a  430a              ORRS     r2,r2,r1
00000c  8382              STRH     r2,[r0,#0x1c]
;;;2406   }
00000e  4770              BX       lr
;;;2407   
                          ENDP


                          AREA ||i.TIM_SetIC4Prescaler||, CODE, EXECONLY, ALIGN=1

                  TIM_SetIC4Prescaler PROC
;;;2418     */
;;;2419   void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
000000  8b82              LDRH     r2,[r0,#0x1c]
;;;2420   {  
;;;2421     /* Check the parameters */
;;;2422     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;2423     assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
;;;2424     /* Reset the IC4PSC Bits */
;;;2425     TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
000002  f4226240          BIC      r2,r2,#0xc00
000006  8382              STRH     r2,[r0,#0x1c]
;;;2426     /* Set the IC4PSC value */
;;;2427     TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
000008  8b82              LDRH     r2,[r0,#0x1c]
00000a  f64f73ff          MOV      r3,#0xffff
00000e  ea032101          AND      r1,r3,r1,LSL #8
000012  430a              ORRS     r2,r2,r1
000014  8382              STRH     r2,[r0,#0x1c]
;;;2428   }
000016  4770              BX       lr
;;;2429   
                          ENDP


                          AREA ||i.TIM_TIxExternalClockConfig||, CODE, EXECONLY, ALIGN=1

                  TIM_TIxExternalClockConfig PROC
;;;1034     */
;;;1035   void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
000000  b570              PUSH     {r4-r6,lr}
;;;1036                                   uint16_t TIM_ICPolarity, uint16_t ICFilter)
;;;1037   {
000002  4616              MOV      r6,r2
000004  460d              MOV      r5,r1
;;;1038     /* Check the parameters */
;;;1039     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;1040     assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
;;;1041     assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
;;;1042     assert_param(IS_TIM_IC_FILTER(ICFilter));
;;;1043     /* Configure the Timer Input Clock Source */
;;;1044     if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
000006  2960              CMP      r1,#0x60
000008  4604              MOV      r4,r0                 ;1037
;;;1045     {
;;;1046       TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
;;;1047     }
;;;1048     else
;;;1049     {
;;;1050       TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
00000a  f04f0201          MOV      r2,#1
00000e  4631              MOV      r1,r6
000010  d00a              BEQ      |L85.40|
000012  f7fffffe          BL       TI1_Config
                  |L85.22|
;;;1051     }
;;;1052     /* Select the Trigger source */
;;;1053     TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
000016  4629              MOV      r1,r5
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       TIM_SelectInputTrigger
;;;1054     /* Select the External clock mode1 */
;;;1055     TIMx->SMCR |= TIM_SlaveMode_External1;
00001e  8920              LDRH     r0,[r4,#8]
000020  f0400007          ORR      r0,r0,#7
000024  8120              STRH     r0,[r4,#8]
;;;1056   }
000026  bd70              POP      {r4-r6,pc}
                  |L85.40|
000028  f7fffffe          BL       TI2_Config
00002c  e7f3              B        |L85.22|
;;;1057   
                          ENDP


                          AREA ||i.TIM_TimeBaseInit||, CODE, EXECONLY, ALIGN=1

                  TIM_TimeBaseInit PROC
;;;225      */
;;;226    void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;227    {
;;;228      uint16_t tmpcr1 = 0;
;;;229    
;;;230      /* Check the parameters */
;;;231      assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
;;;232      assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
;;;233      assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));
;;;234    
;;;235      tmpcr1 = TIMx->CR1;  
000002  8802              LDRH     r2,[r0,#0]
;;;236    
;;;237      if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
000004  f44f5430          MOV      r4,#0x2c00
000008  f2c40401          MOVT     r4,#0x4001
00000c  f44f5550          MOV      r5,#0x3400
000010  f2c40501          MOVT     r5,#0x4001
000014  42a0              CMP      r0,r4
000016  d013              BEQ      |L86.64|
000018  42a8              CMP      r0,r5
00001a  d011              BEQ      |L86.64|
00001c  f1b04f80          CMP      r0,#0x40000000
000020  d00e              BEQ      |L86.64|
000022  f1a04380          SUB      r3,r0,#0x40000000
000026  f5b36380          SUBS     r3,r3,#0x400
00002a  d009              BEQ      |L86.64|
;;;238         (TIMx == TIM4) || (TIMx == TIM5)) 
00002c  f1a04380          SUB      r3,r0,#0x40000000
000030  f5b36300          SUBS     r3,r3,#0x800
000034  d004              BEQ      |L86.64|
000036  f1a04380          SUB      r3,r0,#0x40000000
00003a  f5b36340          SUBS     r3,r3,#0xc00
00003e  d103              BNE      |L86.72|
                  |L86.64|
;;;239      {
;;;240        /* Select the Counter Mode */
;;;241        tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
000040  f0220370          BIC      r3,r2,#0x70
;;;242        tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
000044  884a              LDRH     r2,[r1,#2]
000046  431a              ORRS     r2,r2,r3
                  |L86.72|
;;;243      }
;;;244     
;;;245      if((TIMx != TIM6) && (TIMx != TIM7))
000048  f1a04380          SUB      r3,r0,#0x40000000
00004c  f5b35380          SUBS     r3,r3,#0x1000
000050  d008              BEQ      |L86.100|
000052  f1a04380          SUB      r3,r0,#0x40000000
000056  f5b353a0          SUBS     r3,r3,#0x1400
00005a  d003              BEQ      |L86.100|
;;;246      {
;;;247        /* Set the clock division */
;;;248        tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
00005c  f4227340          BIC      r3,r2,#0x300
;;;249        tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
000060  88ca              LDRH     r2,[r1,#6]
000062  431a              ORRS     r2,r2,r3
                  |L86.100|
;;;250      }
;;;251    
;;;252      TIMx->CR1 = tmpcr1;
000064  8002              STRH     r2,[r0,#0]
;;;253    
;;;254      /* Set the Autoreload value */
;;;255      TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
000066  888a              LDRH     r2,[r1,#4]
000068  8582              STRH     r2,[r0,#0x2c]
;;;256     
;;;257      /* Set the Prescaler value */
;;;258      TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
00006a  880a              LDRH     r2,[r1,#0]
00006c  8502              STRH     r2,[r0,#0x28]
;;;259        
;;;260      if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
00006e  42a0              CMP      r0,r4
000070  d010              BEQ      |L86.148|
000072  42a8              CMP      r0,r5
000074  d00e              BEQ      |L86.148|
000076  f1a04280          SUB      r2,r0,#0x40000000
00007a  f5b232a0          SUBS     r2,r2,#0x14000
00007e  d009              BEQ      |L86.148|
000080  f1a04280          SUB      r2,r0,#0x40000000
000084  f5b232a2          SUBS     r2,r2,#0x14400
000088  d004              BEQ      |L86.148|
00008a  f1a04280          SUB      r2,r0,#0x40000000
00008e  f5b232a4          SUBS     r2,r2,#0x14800
000092  d101              BNE      |L86.152|
                  |L86.148|
;;;261      {
;;;262        /* Set the Repetition Counter value */
;;;263        TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
000094  7a09              LDRB     r1,[r1,#8]
000096  8601              STRH     r1,[r0,#0x30]
                  |L86.152|
;;;264      }
;;;265    
;;;266      /* Generate an update event to reload the Prescaler and the Repetition counter
;;;267         values immediately */
;;;268      TIMx->EGR = TIM_PSCReloadMode_Immediate;           
000098  2101              MOVS     r1,#1
00009a  8281              STRH     r1,[r0,#0x14]
;;;269    }
00009c  bd30              POP      {r4,r5,pc}
;;;270    
                          ENDP


                          AREA ||i.TIM_TimeBaseStructInit||, CODE, EXECONLY, ALIGN=1

                  TIM_TimeBaseStructInit PROC
;;;735      */
;;;736    void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
000000  f64f71ff          MOV      r1,#0xffff
;;;737    {
;;;738      /* Set the default configuration */
;;;739      TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
000004  8081              STRH     r1,[r0,#4]
;;;740      TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
000006  2100              MOVS     r1,#0
000008  8001              STRH     r1,[r0,#0]
;;;741      TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
00000a  80c1              STRH     r1,[r0,#6]
;;;742      TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
00000c  8041              STRH     r1,[r0,#2]
;;;743      TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
00000e  7201              STRB     r1,[r0,#8]
;;;744    }
000010  4770              BX       lr
;;;745    
                          ENDP


                          AREA ||i.TIM_UpdateDisableConfig||, CODE, EXECONLY, ALIGN=1

                  TIM_UpdateDisableConfig PROC
;;;2091     */
;;;2092   void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;2093   {
;;;2094     /* Check the parameters */
;;;2095     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2096     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;2097     if (NewState != DISABLE)
;;;2098     {
;;;2099       /* Set the Update Disable Bit */
;;;2100       TIMx->CR1 |= TIM_CR1_UDIS;
;;;2101     }
;;;2102     else
;;;2103     {
;;;2104       /* Reset the Update Disable Bit */
;;;2105       TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
000002  8801              LDRH     r1,[r0,#0]
000004  d002              BEQ      |L88.12|
000006  f0410102          ORR      r1,r1,#2              ;2100
00000a  e001              B        |L88.16|
                  |L88.12|
00000c  f0210102          BIC      r1,r1,#2
                  |L88.16|
000010  8001              STRH     r1,[r0,#0]            ;2100
;;;2106     }
;;;2107   }
000012  4770              BX       lr
;;;2108   
                          ENDP


                          AREA ||i.TIM_UpdateRequestConfig||, CODE, EXECONLY, ALIGN=1

                  TIM_UpdateRequestConfig PROC
;;;2119     */
;;;2120   void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
000000  2900              CMP      r1,#0
;;;2121   {
;;;2122     /* Check the parameters */
;;;2123     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2124     assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
;;;2125     if (TIM_UpdateSource != TIM_UpdateSource_Global)
;;;2126     {
;;;2127       /* Set the URS Bit */
;;;2128       TIMx->CR1 |= TIM_CR1_URS;
;;;2129     }
;;;2130     else
;;;2131     {
;;;2132       /* Reset the URS Bit */
;;;2133       TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
000002  8801              LDRH     r1,[r0,#0]
000004  d002              BEQ      |L89.12|
000006  f0410104          ORR      r1,r1,#4              ;2128
00000a  e001              B        |L89.16|
                  |L89.12|
00000c  f0210104          BIC      r1,r1,#4
                  |L89.16|
000010  8001              STRH     r1,[r0,#0]            ;2128
;;;2134     }
;;;2135   }
000012  4770              BX       lr
;;;2136   
                          ENDP

